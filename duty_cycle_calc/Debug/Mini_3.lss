
Mini_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00003280  00003314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080018c  0080018c  00003440  2**0
                  ALLOC
  3 .stab         00002268  00000000  00000000  00003440  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff1  00000000  00000000  000056a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006699  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006839  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b394  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b84a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__vector_1>
       8:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__vector_2>
       c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_3>
      10:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_6>
      1c:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_7>
      20:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_8>
      24:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__vector_18>
      4c:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <main>
      8a:	0c 94 3e 19 	jmp	0x327c	; 0x327c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e6       	ldi	r22, 0x6D	; 109
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 58       	subi	r30, 0x8B	; 139
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_9>:
static volatile void (*T2_callBack_Ptr)(void) = NULL;

                                       /*ISR for timer 0*/

ISR(TIMER0_OVF_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(T0_callBack_Ptr != NULL)
     e58:	80 91 8c 01 	lds	r24, 0x018C
     e5c:	90 91 8d 01 	lds	r25, 0x018D
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_9+0x40>
	{

		(*T0_callBack_Ptr)();// calling the function from the main using pointer to function
     e64:	e0 91 8c 01 	lds	r30, 0x018C
     e68:	f0 91 8d 01 	lds	r31, 0x018D
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	if(T0_callBack_Ptr != NULL)
     ebe:	80 91 8c 01 	lds	r24, 0x018C
     ec2:	90 91 8d 01 	lds	r25, 0x018D
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	29 f0       	breq	.+10     	; 0xed4 <__vector_19+0x40>
	{

		(*T0_callBack_Ptr)();// calling the function from the main using pointer to function
     eca:	e0 91 8c 01 	lds	r30, 0x018C
     ece:	f0 91 8d 01 	lds	r31, 0x018D
     ed2:	09 95       	icall
	}
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_8>:


                                     /*ISR for timer 1*/

ISR(TIMER1_OVF_vect)
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	if(T1_callBack_Ptr != NULL)
     f24:	80 91 8e 01 	lds	r24, 0x018E
     f28:	90 91 8f 01 	lds	r25, 0x018F
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	29 f0       	breq	.+10     	; 0xf3a <__vector_8+0x40>
	{

		(*T1_callBack_Ptr)(); // calling the function from the main using pointer to function
     f30:	e0 91 8e 01 	lds	r30, 0x018E
     f34:	f0 91 8f 01 	lds	r31, 0x018F
     f38:	09 95       	icall
	}
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	if(T1_callBack_Ptr != NULL)
     f8a:	80 91 8e 01 	lds	r24, 0x018E
     f8e:	90 91 8f 01 	lds	r25, 0x018F
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	29 f0       	breq	.+10     	; 0xfa0 <__vector_6+0x40>
	{

		(*T1_callBack_Ptr)(); // calling the function from the main using pointer to function
     f96:	e0 91 8e 01 	lds	r30, 0x018E
     f9a:	f0 91 8f 01 	lds	r31, 0x018F
     f9e:	09 95       	icall
	}
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	if(T1_callBack_Ptr != NULL)
     ff0:	80 91 8e 01 	lds	r24, 0x018E
     ff4:	90 91 8f 01 	lds	r25, 0x018F
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	29 f0       	breq	.+10     	; 0x1006 <__vector_7+0x40>
	{

		(*T1_callBack_Ptr)(); // calling the function from the main using pointer to function
     ffc:	e0 91 8e 01 	lds	r30, 0x018E
    1000:	f0 91 8f 01 	lds	r31, 0x018F
    1004:	09 95       	icall
	}
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <__vector_4>:


                                     /*ISR for timer 2*/
ISR(TIMER2_OVF_vect)
{
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	if(T2_callBack_Ptr != NULL)
    1056:	80 91 90 01 	lds	r24, 0x0190
    105a:	90 91 91 01 	lds	r25, 0x0191
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	29 f0       	breq	.+10     	; 0x106c <__vector_4+0x40>
	{

		(*T2_callBack_Ptr)(); //calling the function from the main using pointer to function
    1062:	e0 91 90 01 	lds	r30, 0x0190
    1066:	f0 91 91 01 	lds	r31, 0x0191
    106a:	09 95       	icall
	}
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	if(T2_callBack_Ptr != NULL)
    10bc:	80 91 90 01 	lds	r24, 0x0190
    10c0:	90 91 91 01 	lds	r25, 0x0191
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	29 f0       	breq	.+10     	; 0x10d2 <__vector_3+0x40>
	{

		(*T2_callBack_Ptr)(); //calling the function from the main using pointer to function
    10c8:	e0 91 90 01 	lds	r30, 0x0190
    10cc:	f0 91 91 01 	lds	r31, 0x0191
    10d0:	09 95       	icall
	}
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	bf 91       	pop	r27
    10dc:	af 91       	pop	r26
    10de:	9f 91       	pop	r25
    10e0:	8f 91       	pop	r24
    10e2:	7f 91       	pop	r23
    10e4:	6f 91       	pop	r22
    10e6:	5f 91       	pop	r21
    10e8:	4f 91       	pop	r20
    10ea:	3f 91       	pop	r19
    10ec:	2f 91       	pop	r18
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <TimerSetCallBack>:


       /*function to take a pointer of the needed function in main and pass it to the ISR function*/

void TimerSetCallBack(Timer_Type timer_type,  void(*Function_ptr)(void))
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <TimerSetCallBack+0x6>
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	7b 83       	std	Y+3, r23	; 0x03
    1108:	6a 83       	std	Y+2, r22	; 0x02
if(timer_type==Timer_0){T0_callBack_Ptr = Function_ptr;}
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	88 23       	and	r24, r24
    110e:	39 f4       	brne	.+14     	; 0x111e <TimerSetCallBack+0x26>
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	9b 81       	ldd	r25, Y+3	; 0x03
    1114:	90 93 8d 01 	sts	0x018D, r25
    1118:	80 93 8c 01 	sts	0x018C, r24
    111c:	13 c0       	rjmp	.+38     	; 0x1144 <TimerSetCallBack+0x4c>
else if(timer_type==Timer_1){T1_callBack_Ptr = Function_ptr;}
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	39 f4       	brne	.+14     	; 0x1132 <TimerSetCallBack+0x3a>
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	9b 81       	ldd	r25, Y+3	; 0x03
    1128:	90 93 8f 01 	sts	0x018F, r25
    112c:	80 93 8e 01 	sts	0x018E, r24
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <TimerSetCallBack+0x4c>
else if(timer_type==Timer_2){T2_callBack_Ptr = Function_ptr;}// or we will use just else
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	82 30       	cpi	r24, 0x02	; 2
    1136:	31 f4       	brne	.+12     	; 0x1144 <TimerSetCallBack+0x4c>
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	90 93 91 01 	sts	0x0191, r25
    1140:	80 93 90 01 	sts	0x0190, r24
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <TimerInit>:



         /*function to set the initial values for any timer type*/

void TimerInit(const Timer_Configuration * Configuration_Ptr){
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <TimerInit+0x6>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	89 83       	std	Y+1, r24	; 0x01

	if(Configuration_Ptr->timer_type==Timer_0){
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	84 81       	ldd	r24, Z+4	; 0x04
    1166:	88 23       	and	r24, r24
    1168:	09 f0       	breq	.+2      	; 0x116c <TimerInit+0x1c>
    116a:	a2 c0       	rjmp	.+324    	; 0x12b0 <TimerInit+0x160>

		TimerDeInit(Timer_0);// reset all registers
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TimerDeInit>
		TCNT0 = (Configuration_Ptr->timer_Initial_Value) & 0xFF;
    1172:	a2 e5       	ldi	r26, 0x52	; 82
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e9 81       	ldd	r30, Y+1	; 0x01
    1178:	fa 81       	ldd	r31, Y+2	; 0x02
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	8c 93       	st	X, r24
		TCCR0 = (TCCR0  & CLEAR_CLOCK_VALUE) | (Configuration_Ptr->timer_clk);
    1180:	a3 e5       	ldi	r26, 0x53	; 83
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e3 e5       	ldi	r30, 0x53	; 83
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	98 2f       	mov	r25, r24
    118c:	98 7f       	andi	r25, 0xF8	; 248
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	85 81       	ldd	r24, Z+5	; 0x05
    1194:	89 2b       	or	r24, r25
    1196:	8c 93       	st	X, r24
		TCCR0  = CLEAR_BIT(TCCR0 ,  COM00);
    1198:	23 e5       	ldi	r18, 0x53	; 83
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	a3 e5       	ldi	r26, 0x53	; 83
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8f 7e       	andi	r24, 0xEF	; 239
    11a8:	8c 93       	st	X, r24
    11aa:	8c 91       	ld	r24, X
    11ac:	f9 01       	movw	r30, r18
    11ae:	80 83       	st	Z, r24
		TCCR0  = CLEAR_BIT(TCCR0 ,  COM01);
    11b0:	23 e5       	ldi	r18, 0x53	; 83
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	a3 e5       	ldi	r26, 0x53	; 83
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e3 e5       	ldi	r30, 0x53	; 83
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8f 7d       	andi	r24, 0xDF	; 223
    11c0:	8c 93       	st	X, r24
    11c2:	8c 91       	ld	r24, X
    11c4:	f9 01       	movw	r30, r18
    11c6:	80 83       	st	Z, r24

        if(Configuration_Ptr->timer_mode== Overflow)
    11c8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ca:	fa 81       	ldd	r31, Y+2	; 0x02
    11cc:	86 81       	ldd	r24, Z+6	; 0x06
    11ce:	88 23       	and	r24, r24
    11d0:	89 f5       	brne	.+98     	; 0x1234 <TimerInit+0xe4>
        {
        	TCCR0  = CLEAR_BIT(TCCR0 , WGM00);
    11d2:	23 e5       	ldi	r18, 0x53	; 83
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	a3 e5       	ldi	r26, 0x53	; 83
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e3 e5       	ldi	r30, 0x53	; 83
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8f 7b       	andi	r24, 0xBF	; 191
    11e2:	8c 93       	st	X, r24
    11e4:	8c 91       	ld	r24, X
    11e6:	f9 01       	movw	r30, r18
    11e8:	80 83       	st	Z, r24
        	TCCR0  = CLEAR_BIT(TCCR0 , WGM01);
    11ea:	23 e5       	ldi	r18, 0x53	; 83
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	a3 e5       	ldi	r26, 0x53	; 83
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e3 e5       	ldi	r30, 0x53	; 83
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	87 7f       	andi	r24, 0xF7	; 247
    11fa:	8c 93       	st	X, r24
    11fc:	8c 91       	ld	r24, X
    11fe:	f9 01       	movw	r30, r18
    1200:	80 83       	st	Z, r24
        	TCCR0  = SET_BIT(TCCR0,FOC0);
    1202:	23 e5       	ldi	r18, 0x53	; 83
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	a3 e5       	ldi	r26, 0x53	; 83
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e3 e5       	ldi	r30, 0x53	; 83
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 68       	ori	r24, 0x80	; 128
    1212:	8c 93       	st	X, r24
    1214:	8c 91       	ld	r24, X
    1216:	f9 01       	movw	r30, r18
    1218:	80 83       	st	Z, r24
        	TIMSK = SET_BIT(TIMSK, TOIE0);
    121a:	29 e5       	ldi	r18, 0x59	; 89
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	a9 e5       	ldi	r26, 0x59	; 89
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e9 e5       	ldi	r30, 0x59	; 89
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	81 60       	ori	r24, 0x01	; 1
    122a:	8c 93       	st	X, r24
    122c:	8c 91       	ld	r24, X
    122e:	f9 01       	movw	r30, r18
    1230:	80 83       	st	Z, r24
    1232:	42 c2       	rjmp	.+1156   	; 0x16b8 <TimerInit+0x568>

        }
        else if(Configuration_Ptr->timer_mode==Compare)
    1234:	e9 81       	ldd	r30, Y+1	; 0x01
    1236:	fa 81       	ldd	r31, Y+2	; 0x02
    1238:	86 81       	ldd	r24, Z+6	; 0x06
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	09 f0       	breq	.+2      	; 0x1240 <TimerInit+0xf0>
    123e:	3c c2       	rjmp	.+1144   	; 0x16b8 <TimerInit+0x568>
        {
        TCCR0  = CLEAR_BIT(TCCR0 , WGM00);
    1240:	23 e5       	ldi	r18, 0x53	; 83
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	a3 e5       	ldi	r26, 0x53	; 83
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e3 e5       	ldi	r30, 0x53	; 83
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8f 7b       	andi	r24, 0xBF	; 191
    1250:	8c 93       	st	X, r24
    1252:	8c 91       	ld	r24, X
    1254:	f9 01       	movw	r30, r18
    1256:	80 83       	st	Z, r24
        TCCR0  = SET_BIT(TCCR0 , WGM01);
    1258:	23 e5       	ldi	r18, 0x53	; 83
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	a3 e5       	ldi	r26, 0x53	; 83
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e3 e5       	ldi	r30, 0x53	; 83
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	88 60       	ori	r24, 0x08	; 8
    1268:	8c 93       	st	X, r24
    126a:	8c 91       	ld	r24, X
    126c:	f9 01       	movw	r30, r18
    126e:	80 83       	st	Z, r24
        TCCR0  = SET_BIT(TCCR0,FOC0);
    1270:	23 e5       	ldi	r18, 0x53	; 83
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	a3 e5       	ldi	r26, 0x53	; 83
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e3 e5       	ldi	r30, 0x53	; 83
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	80 68       	ori	r24, 0x80	; 128
    1280:	8c 93       	st	X, r24
    1282:	8c 91       	ld	r24, X
    1284:	f9 01       	movw	r30, r18
    1286:	80 83       	st	Z, r24
        OCR0 = ((Configuration_Ptr->timer_Match_Value)) & 0xFF;
    1288:	ac e5       	ldi	r26, 0x5C	; 92
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e9 81       	ldd	r30, Y+1	; 0x01
    128e:	fa 81       	ldd	r31, Y+2	; 0x02
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	8c 93       	st	X, r24
        TIMSK = SET_BIT(  TIMSK, OCIE0);
    1296:	29 e5       	ldi	r18, 0x59	; 89
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	a9 e5       	ldi	r26, 0x59	; 89
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e9 e5       	ldi	r30, 0x59	; 89
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	82 60       	ori	r24, 0x02	; 2
    12a6:	8c 93       	st	X, r24
    12a8:	8c 91       	ld	r24, X
    12aa:	f9 01       	movw	r30, r18
    12ac:	80 83       	st	Z, r24
    12ae:	04 c2       	rjmp	.+1032   	; 0x16b8 <TimerInit+0x568>





	else if(Configuration_Ptr->timer_type==Timer_1){
    12b0:	e9 81       	ldd	r30, Y+1	; 0x01
    12b2:	fa 81       	ldd	r31, Y+2	; 0x02
    12b4:	84 81       	ldd	r24, Z+4	; 0x04
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	09 f0       	breq	.+2      	; 0x12bc <TimerInit+0x16c>
    12ba:	52 c1       	rjmp	.+676    	; 0x1560 <TimerInit+0x410>



	TimerDeInit(Timer_1);// reset all registers
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TimerDeInit>

	TCNT1 = (Configuration_Ptr->timer_Initial_Value) & 0xFFFF;
    12c2:	ac e4       	ldi	r26, 0x4C	; 76
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e9 81       	ldd	r30, Y+1	; 0x01
    12c8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ca:	80 81       	ld	r24, Z
    12cc:	91 81       	ldd	r25, Z+1	; 0x01
    12ce:	11 96       	adiw	r26, 0x01	; 1
    12d0:	9c 93       	st	X, r25
    12d2:	8e 93       	st	-X, r24
	TCCR1B =  (TCCR1B & CLEAR_CLOCK_VALUE) | (Configuration_Ptr->timer_clk);
    12d4:	ae e4       	ldi	r26, 0x4E	; 78
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ee e4       	ldi	r30, 0x4E	; 78
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	98 2f       	mov	r25, r24
    12e0:	98 7f       	andi	r25, 0xF8	; 248
    12e2:	e9 81       	ldd	r30, Y+1	; 0x01
    12e4:	fa 81       	ldd	r31, Y+2	; 0x02
    12e6:	85 81       	ldd	r24, Z+5	; 0x05
    12e8:	89 2b       	or	r24, r25
    12ea:	8c 93       	st	X, r24
	TCCR1A &= 0x0F;
    12ec:	af e4       	ldi	r26, 0x4F	; 79
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ef e4       	ldi	r30, 0x4F	; 79
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8f 70       	andi	r24, 0x0F	; 15
    12f8:	8c 93       	st	X, r24

	if(Configuration_Ptr->timer_mode== Overflow)
    12fa:	e9 81       	ldd	r30, Y+1	; 0x01
    12fc:	fa 81       	ldd	r31, Y+2	; 0x02
    12fe:	86 81       	ldd	r24, Z+6	; 0x06
    1300:	88 23       	and	r24, r24
    1302:	09 f0       	breq	.+2      	; 0x1306 <TimerInit+0x1b6>
    1304:	55 c0       	rjmp	.+170    	; 0x13b0 <TimerInit+0x260>
	        {
	        	TCCR1A  = CLEAR_BIT(TCCR1A , WGM10);
    1306:	2f e4       	ldi	r18, 0x4F	; 79
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	af e4       	ldi	r26, 0x4F	; 79
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ef e4       	ldi	r30, 0x4F	; 79
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8e 7f       	andi	r24, 0xFE	; 254
    1316:	8c 93       	st	X, r24
    1318:	8c 91       	ld	r24, X
    131a:	f9 01       	movw	r30, r18
    131c:	80 83       	st	Z, r24
	        	TCCR1A  = CLEAR_BIT(TCCR1A , WGM11);
    131e:	2f e4       	ldi	r18, 0x4F	; 79
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	af e4       	ldi	r26, 0x4F	; 79
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	ef e4       	ldi	r30, 0x4F	; 79
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8d 7f       	andi	r24, 0xFD	; 253
    132e:	8c 93       	st	X, r24
    1330:	8c 91       	ld	r24, X
    1332:	f9 01       	movw	r30, r18
    1334:	80 83       	st	Z, r24
	        	TCCR1B  = CLEAR_BIT(TCCR1B , WGM12);
    1336:	2e e4       	ldi	r18, 0x4E	; 78
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	ae e4       	ldi	r26, 0x4E	; 78
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ee e4       	ldi	r30, 0x4E	; 78
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	87 7f       	andi	r24, 0xF7	; 247
    1346:	8c 93       	st	X, r24
    1348:	8c 91       	ld	r24, X
    134a:	f9 01       	movw	r30, r18
    134c:	80 83       	st	Z, r24
	            TCCR1B  = CLEAR_BIT(TCCR1B , WGM13);
    134e:	2e e4       	ldi	r18, 0x4E	; 78
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	ae e4       	ldi	r26, 0x4E	; 78
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ee e4       	ldi	r30, 0x4E	; 78
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	8f 7e       	andi	r24, 0xEF	; 239
    135e:	8c 93       	st	X, r24
    1360:	8c 91       	ld	r24, X
    1362:	f9 01       	movw	r30, r18
    1364:	80 83       	st	Z, r24
	        	TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    1366:	2f e4       	ldi	r18, 0x4F	; 79
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	af e4       	ldi	r26, 0x4F	; 79
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ef e4       	ldi	r30, 0x4F	; 79
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	88 60       	ori	r24, 0x08	; 8
    1376:	8c 93       	st	X, r24
    1378:	8c 91       	ld	r24, X
    137a:	f9 01       	movw	r30, r18
    137c:	80 83       	st	Z, r24
	        	TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    137e:	2f e4       	ldi	r18, 0x4F	; 79
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	af e4       	ldi	r26, 0x4F	; 79
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	ef e4       	ldi	r30, 0x4F	; 79
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	84 60       	ori	r24, 0x04	; 4
    138e:	8c 93       	st	X, r24
    1390:	8c 91       	ld	r24, X
    1392:	f9 01       	movw	r30, r18
    1394:	80 83       	st	Z, r24
                TIMSK= SET_BIT(TIMSK,TOIE1);
    1396:	29 e5       	ldi	r18, 0x59	; 89
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	a9 e5       	ldi	r26, 0x59	; 89
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e9 e5       	ldi	r30, 0x59	; 89
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	84 60       	ori	r24, 0x04	; 4
    13a6:	8c 93       	st	X, r24
    13a8:	8c 91       	ld	r24, X
    13aa:	f9 01       	movw	r30, r18
    13ac:	80 83       	st	Z, r24
    13ae:	84 c1       	rjmp	.+776    	; 0x16b8 <TimerInit+0x568>


	        }
	        else if(Configuration_Ptr->timer_mode==Compare)
    13b0:	e9 81       	ldd	r30, Y+1	; 0x01
    13b2:	fa 81       	ldd	r31, Y+2	; 0x02
    13b4:	86 81       	ldd	r24, Z+6	; 0x06
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	09 f0       	breq	.+2      	; 0x13bc <TimerInit+0x26c>
    13ba:	7e c1       	rjmp	.+764    	; 0x16b8 <TimerInit+0x568>
	        {
	       if(Configuration_Ptr->compare_register==Channel_A)
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	87 81       	ldd	r24, Z+7	; 0x07
    13c2:	88 23       	and	r24, r24
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <TimerInit+0x278>
    13c6:	5e c0       	rjmp	.+188    	; 0x1484 <TimerInit+0x334>
	       {

	    	                    TCCR1A  = CLEAR_BIT(TCCR1A , WGM10);
    13c8:	2f e4       	ldi	r18, 0x4F	; 79
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	af e4       	ldi	r26, 0x4F	; 79
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ef e4       	ldi	r30, 0x4F	; 79
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8e 7f       	andi	r24, 0xFE	; 254
    13d8:	8c 93       	st	X, r24
    13da:	8c 91       	ld	r24, X
    13dc:	f9 01       	movw	r30, r18
    13de:	80 83       	st	Z, r24
	    	   	             	TCCR1A  = CLEAR_BIT(TCCR1A , WGM11);
    13e0:	2f e4       	ldi	r18, 0x4F	; 79
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	af e4       	ldi	r26, 0x4F	; 79
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ef e4       	ldi	r30, 0x4F	; 79
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8d 7f       	andi	r24, 0xFD	; 253
    13f0:	8c 93       	st	X, r24
    13f2:	8c 91       	ld	r24, X
    13f4:	f9 01       	movw	r30, r18
    13f6:	80 83       	st	Z, r24
	    	   					TCCR1B = SET_BIT(TCCR1B, WGM12);
    13f8:	2e e4       	ldi	r18, 0x4E	; 78
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	ae e4       	ldi	r26, 0x4E	; 78
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ee e4       	ldi	r30, 0x4E	; 78
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	88 60       	ori	r24, 0x08	; 8
    1408:	8c 93       	st	X, r24
    140a:	8c 91       	ld	r24, X
    140c:	f9 01       	movw	r30, r18
    140e:	80 83       	st	Z, r24
	    	   					TCCR1B = CLEAR_BIT(TCCR1B, WGM13);
    1410:	2e e4       	ldi	r18, 0x4E	; 78
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	ae e4       	ldi	r26, 0x4E	; 78
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ee e4       	ldi	r30, 0x4E	; 78
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8f 7e       	andi	r24, 0xEF	; 239
    1420:	8c 93       	st	X, r24
    1422:	8c 91       	ld	r24, X
    1424:	f9 01       	movw	r30, r18
    1426:	80 83       	st	Z, r24
                                TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    1428:	2f e4       	ldi	r18, 0x4F	; 79
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	af e4       	ldi	r26, 0x4F	; 79
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ef e4       	ldi	r30, 0x4F	; 79
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	88 60       	ori	r24, 0x08	; 8
    1438:	8c 93       	st	X, r24
    143a:	8c 91       	ld	r24, X
    143c:	f9 01       	movw	r30, r18
    143e:	80 83       	st	Z, r24
	    	   					TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    1440:	2f e4       	ldi	r18, 0x4F	; 79
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	af e4       	ldi	r26, 0x4F	; 79
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ef e4       	ldi	r30, 0x4F	; 79
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	84 60       	ori	r24, 0x04	; 4
    1450:	8c 93       	st	X, r24
    1452:	8c 91       	ld	r24, X
    1454:	f9 01       	movw	r30, r18
    1456:	80 83       	st	Z, r24
                                OCR1A = (Configuration_Ptr->timer_Match_Value) & 0xFFFF;
    1458:	aa e4       	ldi	r26, 0x4A	; 74
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e9 81       	ldd	r30, Y+1	; 0x01
    145e:	fa 81       	ldd	r31, Y+2	; 0x02
    1460:	82 81       	ldd	r24, Z+2	; 0x02
    1462:	93 81       	ldd	r25, Z+3	; 0x03
    1464:	11 96       	adiw	r26, 0x01	; 1
    1466:	9c 93       	st	X, r25
    1468:	8e 93       	st	-X, r24
                                TIMSK = SET_BIT(TIMSK,OCIE1A);
    146a:	29 e5       	ldi	r18, 0x59	; 89
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	a9 e5       	ldi	r26, 0x59	; 89
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e9 e5       	ldi	r30, 0x59	; 89
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	80 61       	ori	r24, 0x10	; 16
    147a:	8c 93       	st	X, r24
    147c:	8c 91       	ld	r24, X
    147e:	f9 01       	movw	r30, r18
    1480:	80 83       	st	Z, r24
    1482:	1a c1       	rjmp	.+564    	; 0x16b8 <TimerInit+0x568>

	       }
	       else if(Configuration_Ptr->compare_register==Channel_B) //or just else
    1484:	e9 81       	ldd	r30, Y+1	; 0x01
    1486:	fa 81       	ldd	r31, Y+2	; 0x02
    1488:	87 81       	ldd	r24, Z+7	; 0x07
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	09 f0       	breq	.+2      	; 0x1490 <TimerInit+0x340>
    148e:	14 c1       	rjmp	.+552    	; 0x16b8 <TimerInit+0x568>
	       {
	    	    TCCR1A  = CLEAR_BIT(TCCR1A , WGM10);
    1490:	2f e4       	ldi	r18, 0x4F	; 79
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	af e4       	ldi	r26, 0x4F	; 79
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ef e4       	ldi	r30, 0x4F	; 79
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8e 7f       	andi	r24, 0xFE	; 254
    14a0:	8c 93       	st	X, r24
    14a2:	8c 91       	ld	r24, X
    14a4:	f9 01       	movw	r30, r18
    14a6:	80 83       	st	Z, r24
            	TCCR1A  = CLEAR_BIT(TCCR1A , WGM11);
    14a8:	2f e4       	ldi	r18, 0x4F	; 79
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	af e4       	ldi	r26, 0x4F	; 79
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ef e4       	ldi	r30, 0x4F	; 79
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	8d 7f       	andi	r24, 0xFD	; 253
    14b8:	8c 93       	st	X, r24
    14ba:	8c 91       	ld	r24, X
    14bc:	f9 01       	movw	r30, r18
    14be:	80 83       	st	Z, r24
				TCCR1B = SET_BIT(TCCR1B, WGM12);
    14c0:	2e e4       	ldi	r18, 0x4E	; 78
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	ae e4       	ldi	r26, 0x4E	; 78
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ee e4       	ldi	r30, 0x4E	; 78
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	88 60       	ori	r24, 0x08	; 8
    14d0:	8c 93       	st	X, r24
    14d2:	8c 91       	ld	r24, X
    14d4:	f9 01       	movw	r30, r18
    14d6:	80 83       	st	Z, r24
				TCCR1B = CLEAR_BIT(TCCR1B, WGM13);
    14d8:	2e e4       	ldi	r18, 0x4E	; 78
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	ae e4       	ldi	r26, 0x4E	; 78
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ee e4       	ldi	r30, 0x4E	; 78
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 7e       	andi	r24, 0xEF	; 239
    14e8:	8c 93       	st	X, r24
    14ea:	8c 91       	ld	r24, X
    14ec:	f9 01       	movw	r30, r18
    14ee:	80 83       	st	Z, r24
				TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    14f0:	2f e4       	ldi	r18, 0x4F	; 79
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	af e4       	ldi	r26, 0x4F	; 79
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ef e4       	ldi	r30, 0x4F	; 79
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	88 60       	ori	r24, 0x08	; 8
    1500:	8c 93       	st	X, r24
    1502:	8c 91       	ld	r24, X
    1504:	f9 01       	movw	r30, r18
    1506:	80 83       	st	Z, r24
			    TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    1508:	2f e4       	ldi	r18, 0x4F	; 79
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	af e4       	ldi	r26, 0x4F	; 79
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ef e4       	ldi	r30, 0x4F	; 79
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	84 60       	ori	r24, 0x04	; 4
    1518:	8c 93       	st	X, r24
    151a:	8c 91       	ld	r24, X
    151c:	f9 01       	movw	r30, r18
    151e:	80 83       	st	Z, r24
			    OCR1A = ((Configuration_Ptr->timer_Match_Value)+1) & 0xFFFF;
    1520:	aa e4       	ldi	r26, 0x4A	; 74
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e9 81       	ldd	r30, Y+1	; 0x01
    1526:	fa 81       	ldd	r31, Y+2	; 0x02
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	93 81       	ldd	r25, Z+3	; 0x03
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	11 96       	adiw	r26, 0x01	; 1
    1530:	9c 93       	st	X, r25
    1532:	8e 93       	st	-X, r24
				OCR1B = (Configuration_Ptr->timer_Match_Value) & 0xFFFF;
    1534:	a8 e4       	ldi	r26, 0x48	; 72
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e9 81       	ldd	r30, Y+1	; 0x01
    153a:	fa 81       	ldd	r31, Y+2	; 0x02
    153c:	82 81       	ldd	r24, Z+2	; 0x02
    153e:	93 81       	ldd	r25, Z+3	; 0x03
    1540:	11 96       	adiw	r26, 0x01	; 1
    1542:	9c 93       	st	X, r25
    1544:	8e 93       	st	-X, r24
                TIMSK = SET_BIT(TIMSK,OCIE1B);
    1546:	29 e5       	ldi	r18, 0x59	; 89
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	a9 e5       	ldi	r26, 0x59	; 89
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e9 e5       	ldi	r30, 0x59	; 89
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	88 60       	ori	r24, 0x08	; 8
    1556:	8c 93       	st	X, r24
    1558:	8c 91       	ld	r24, X
    155a:	f9 01       	movw	r30, r18
    155c:	80 83       	st	Z, r24
    155e:	ac c0       	rjmp	.+344    	; 0x16b8 <TimerInit+0x568>

	        }

}

	else if(Configuration_Ptr->timer_type==Timer_2){
    1560:	e9 81       	ldd	r30, Y+1	; 0x01
    1562:	fa 81       	ldd	r31, Y+2	; 0x02
    1564:	84 81       	ldd	r24, Z+4	; 0x04
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	09 f0       	breq	.+2      	; 0x156c <TimerInit+0x41c>
    156a:	a6 c0       	rjmp	.+332    	; 0x16b8 <TimerInit+0x568>



	TimerDeInit(Timer_2);// reset all registers
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TimerDeInit>
	ASSR  &= 0X00;
    1572:	e2 e4       	ldi	r30, 0x42	; 66
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	e2 e4       	ldi	r30, 0x42	; 66
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	10 82       	st	Z, r1
	        TCNT2 = (Configuration_Ptr->timer_Initial_Value) & 0xFF;
    157e:	a4 e4       	ldi	r26, 0x44	; 68
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	80 81       	ld	r24, Z
    1588:	91 81       	ldd	r25, Z+1	; 0x01
    158a:	8c 93       	st	X, r24
			TCCR2  = (TCCR2  & CLEAR_CLOCK_VALUE) | (Configuration_Ptr->timer_clk);
    158c:	a5 e4       	ldi	r26, 0x45	; 69
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e5 e4       	ldi	r30, 0x45	; 69
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	98 2f       	mov	r25, r24
    1598:	98 7f       	andi	r25, 0xF8	; 248
    159a:	e9 81       	ldd	r30, Y+1	; 0x01
    159c:	fa 81       	ldd	r31, Y+2	; 0x02
    159e:	85 81       	ldd	r24, Z+5	; 0x05
    15a0:	89 2b       	or	r24, r25
    15a2:	8c 93       	st	X, r24
			TCCR2  = CLEAR_BIT(TCCR2 ,  COM20);
    15a4:	25 e4       	ldi	r18, 0x45	; 69
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	a5 e4       	ldi	r26, 0x45	; 69
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e5 e4       	ldi	r30, 0x45	; 69
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 7e       	andi	r24, 0xEF	; 239
    15b4:	8c 93       	st	X, r24
    15b6:	8c 91       	ld	r24, X
    15b8:	f9 01       	movw	r30, r18
    15ba:	80 83       	st	Z, r24
			TCCR2  = CLEAR_BIT(TCCR2 ,  COM21);
    15bc:	25 e4       	ldi	r18, 0x45	; 69
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	a5 e4       	ldi	r26, 0x45	; 69
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e5 e4       	ldi	r30, 0x45	; 69
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 7d       	andi	r24, 0xDF	; 223
    15cc:	8c 93       	st	X, r24
    15ce:	8c 91       	ld	r24, X
    15d0:	f9 01       	movw	r30, r18
    15d2:	80 83       	st	Z, r24

	        if(Configuration_Ptr->timer_mode== Overflow)
    15d4:	e9 81       	ldd	r30, Y+1	; 0x01
    15d6:	fa 81       	ldd	r31, Y+2	; 0x02
    15d8:	86 81       	ldd	r24, Z+6	; 0x06
    15da:	88 23       	and	r24, r24
    15dc:	89 f5       	brne	.+98     	; 0x1640 <TimerInit+0x4f0>
	        {
	        	TCCR2  = CLEAR_BIT(TCCR2 , WGM20);
    15de:	25 e4       	ldi	r18, 0x45	; 69
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	a5 e4       	ldi	r26, 0x45	; 69
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e5 e4       	ldi	r30, 0x45	; 69
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	8f 7b       	andi	r24, 0xBF	; 191
    15ee:	8c 93       	st	X, r24
    15f0:	8c 91       	ld	r24, X
    15f2:	f9 01       	movw	r30, r18
    15f4:	80 83       	st	Z, r24
	        	TCCR2  = CLEAR_BIT(TCCR2 , WGM21);
    15f6:	25 e4       	ldi	r18, 0x45	; 69
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	a5 e4       	ldi	r26, 0x45	; 69
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e5 e4       	ldi	r30, 0x45	; 69
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	87 7f       	andi	r24, 0xF7	; 247
    1606:	8c 93       	st	X, r24
    1608:	8c 91       	ld	r24, X
    160a:	f9 01       	movw	r30, r18
    160c:	80 83       	st	Z, r24
	        	TCCR2  = SET_BIT(TCCR2,FOC2);
    160e:	25 e4       	ldi	r18, 0x45	; 69
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	a5 e4       	ldi	r26, 0x45	; 69
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e5 e4       	ldi	r30, 0x45	; 69
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 68       	ori	r24, 0x80	; 128
    161e:	8c 93       	st	X, r24
    1620:	8c 91       	ld	r24, X
    1622:	f9 01       	movw	r30, r18
    1624:	80 83       	st	Z, r24
	        	TIMSK = SET_BIT(TIMSK, TOIE2);
    1626:	29 e5       	ldi	r18, 0x59	; 89
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	a9 e5       	ldi	r26, 0x59	; 89
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e9 e5       	ldi	r30, 0x59	; 89
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	80 64       	ori	r24, 0x40	; 64
    1636:	8c 93       	st	X, r24
    1638:	8c 91       	ld	r24, X
    163a:	f9 01       	movw	r30, r18
    163c:	80 83       	st	Z, r24
    163e:	3c c0       	rjmp	.+120    	; 0x16b8 <TimerInit+0x568>

	        }
	        else if(Configuration_Ptr->timer_mode==Compare)
    1640:	e9 81       	ldd	r30, Y+1	; 0x01
    1642:	fa 81       	ldd	r31, Y+2	; 0x02
    1644:	86 81       	ldd	r24, Z+6	; 0x06
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	b9 f5       	brne	.+110    	; 0x16b8 <TimerInit+0x568>
	        {
	        TCCR2 = CLEAR_BIT(TCCR2 , WGM20);
    164a:	25 e4       	ldi	r18, 0x45	; 69
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	a5 e4       	ldi	r26, 0x45	; 69
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e5 e4       	ldi	r30, 0x45	; 69
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8f 7b       	andi	r24, 0xBF	; 191
    165a:	8c 93       	st	X, r24
    165c:	8c 91       	ld	r24, X
    165e:	f9 01       	movw	r30, r18
    1660:	80 83       	st	Z, r24
	        TCCR2  = SET_BIT(TCCR2 , WGM21);
    1662:	25 e4       	ldi	r18, 0x45	; 69
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	a5 e4       	ldi	r26, 0x45	; 69
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e5 e4       	ldi	r30, 0x45	; 69
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	88 60       	ori	r24, 0x08	; 8
    1672:	8c 93       	st	X, r24
    1674:	8c 91       	ld	r24, X
    1676:	f9 01       	movw	r30, r18
    1678:	80 83       	st	Z, r24
	        TCCR2  = SET_BIT(TCCR2,FOC2);
    167a:	25 e4       	ldi	r18, 0x45	; 69
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	a5 e4       	ldi	r26, 0x45	; 69
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e5 e4       	ldi	r30, 0x45	; 69
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 68       	ori	r24, 0x80	; 128
    168a:	8c 93       	st	X, r24
    168c:	8c 91       	ld	r24, X
    168e:	f9 01       	movw	r30, r18
    1690:	80 83       	st	Z, r24
	        OCR2   = (Configuration_Ptr->timer_Match_Value) & 0xFF;
    1692:	a3 e4       	ldi	r26, 0x43	; 67
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e9 81       	ldd	r30, Y+1	; 0x01
    1698:	fa 81       	ldd	r31, Y+2	; 0x02
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	93 81       	ldd	r25, Z+3	; 0x03
    169e:	8c 93       	st	X, r24
	        TIMSK  = SET_BIT(  TIMSK, OCIE2);
    16a0:	29 e5       	ldi	r18, 0x59	; 89
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	a9 e5       	ldi	r26, 0x59	; 89
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e9 e5       	ldi	r30, 0x59	; 89
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	80 68       	ori	r24, 0x80	; 128
    16b0:	8c 93       	st	X, r24
    16b2:	8c 91       	ld	r24, X
    16b4:	f9 01       	movw	r30, r18
    16b6:	80 83       	st	Z, r24
}




}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <TimerStop>:

                          /*stop function to stop the timer from counting*/

void TimerStop(Timer_Type timer_type)// stop timer clk
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	0f 92       	push	r0
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==Timer_0){TCCR0 = TCCR0  & CLEAR_CLOCK_VALUE ;}
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	88 23       	and	r24, r24
    16d4:	41 f4       	brne	.+16     	; 0x16e6 <TimerStop+0x22>
    16d6:	a3 e5       	ldi	r26, 0x53	; 83
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e3 e5       	ldi	r30, 0x53	; 83
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	88 7f       	andi	r24, 0xF8	; 248
    16e2:	8c 93       	st	X, r24
    16e4:	15 c0       	rjmp	.+42     	; 0x1710 <TimerStop+0x4c>
	else if(timer_type==Timer_1){TCCR1B = TCCR1B  & CLEAR_CLOCK_VALUE ;}
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	41 f4       	brne	.+16     	; 0x16fc <TimerStop+0x38>
    16ec:	ae e4       	ldi	r26, 0x4E	; 78
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ee e4       	ldi	r30, 0x4E	; 78
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	88 7f       	andi	r24, 0xF8	; 248
    16f8:	8c 93       	st	X, r24
    16fa:	0a c0       	rjmp	.+20     	; 0x1710 <TimerStop+0x4c>
	else if(timer_type==Timer_2){TCCR2 = TCCR2  & CLEAR_CLOCK_VALUE ;}// or we will use just else
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	39 f4       	brne	.+14     	; 0x1710 <TimerStop+0x4c>
    1702:	a5 e4       	ldi	r26, 0x45	; 69
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e5 e4       	ldi	r30, 0x45	; 69
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	88 7f       	andi	r24, 0xF8	; 248
    170e:	8c 93       	st	X, r24

}
    1710:	0f 90       	pop	r0
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <TimerDeInit>:

                                /*de intializing   the timer registers       */

void TimerDeInit(Timer_Type timer_type)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	2e 97       	sbiw	r28, 0x0e	; 14
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==Timer_0){
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	88 23       	and	r24, r24
    1732:	b1 f4       	brne	.+44     	; 0x1760 <TimerDeInit+0x48>
		TCNT0 =0x00;//timer 0 initial value register
    1734:	e2 e5       	ldi	r30, 0x52	; 82
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	10 82       	st	Z, r1
		TCCR0 &=0x00;//timer 0 control register
    173a:	e3 e5       	ldi	r30, 0x53	; 83
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	e3 e5       	ldi	r30, 0x53	; 83
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	10 82       	st	Z, r1
		OCR0  &=0x00;//timer 0 o/p compare register
    1746:	ec e5       	ldi	r30, 0x5C	; 92
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	90 81       	ld	r25, Z
    174c:	ec e5       	ldi	r30, 0x5C	; 92
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	10 82       	st	Z, r1
		TIMSK &=0x00;//timer 0 interrupt mask register
    1752:	e9 e5       	ldi	r30, 0x59	; 89
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	e9 e5       	ldi	r30, 0x59	; 89
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	10 82       	st	Z, r1
    175e:	42 c0       	rjmp	.+132    	; 0x17e4 <TimerDeInit+0xcc>
	}
	else if(timer_type==Timer_1){
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	39 f5       	brne	.+78     	; 0x17b4 <TimerDeInit+0x9c>
		        TCNT1 =0x00;//timer 1 initial value register
    1766:	ec e4       	ldi	r30, 0x4C	; 76
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	11 82       	std	Z+1, r1	; 0x01
    176c:	10 82       	st	Z, r1
				TCCR1A &=0x00;//timer 1 control register(A)
    176e:	ef e4       	ldi	r30, 0x4F	; 79
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	90 81       	ld	r25, Z
    1774:	ef e4       	ldi	r30, 0x4F	; 79
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	10 82       	st	Z, r1
				TCCR1B &=0x00;//timer 1 control register(B)
    177a:	ee e4       	ldi	r30, 0x4E	; 78
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	ee e4       	ldi	r30, 0x4E	; 78
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	10 82       	st	Z, r1
				OCR1A  &=0x00;//timer 1 o/p compare register(A)
    1786:	ea e4       	ldi	r30, 0x4A	; 74
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	ea e4       	ldi	r30, 0x4A	; 74
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	11 82       	std	Z+1, r1	; 0x01
    1794:	10 82       	st	Z, r1
				OCR1B  &=0x00;//timer 1 o/p compare register(B)
    1796:	e8 e4       	ldi	r30, 0x48	; 72
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	e8 e4       	ldi	r30, 0x48	; 72
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	11 82       	std	Z+1, r1	; 0x01
    17a4:	10 82       	st	Z, r1
				TIMSK  &=0x00;//timer 1 interrupt mask register(higher & lower)
    17a6:	e9 e5       	ldi	r30, 0x59	; 89
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	90 81       	ld	r25, Z
    17ac:	e9 e5       	ldi	r30, 0x59	; 89
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	10 82       	st	Z, r1
    17b2:	18 c0       	rjmp	.+48     	; 0x17e4 <TimerDeInit+0xcc>

	}
	else if(timer_type==Timer_2){
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	a9 f4       	brne	.+42     	; 0x17e4 <TimerDeInit+0xcc>
		TCNT2 =0x00;//timer 2 initial value register
    17ba:	e4 e4       	ldi	r30, 0x44	; 68
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	10 82       	st	Z, r1
		TCCR2 &=0x00;//timer 2 control register
    17c0:	e5 e4       	ldi	r30, 0x45	; 69
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	e5 e4       	ldi	r30, 0x45	; 69
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	10 82       	st	Z, r1
		OCR2  &=0x00;//timer 2 o/p compare register
    17cc:	e3 e4       	ldi	r30, 0x43	; 67
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	90 81       	ld	r25, Z
    17d2:	e3 e4       	ldi	r30, 0x43	; 67
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	10 82       	st	Z, r1
		TIMSK &=0x00;//timer 2 interrupt mask register
    17d8:	e9 e5       	ldi	r30, 0x59	; 89
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	e9 e5       	ldi	r30, 0x59	; 89
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	10 82       	st	Z, r1
	}// or we will use just else

}
    17e4:	2e 96       	adiw	r28, 0x0e	; 14
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <__vector_1>:
                                       /*ISR*/



ISR(INT0_vect)
{
    17f6:	1f 92       	push	r1
    17f8:	0f 92       	push	r0
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	0f 92       	push	r0
    17fe:	11 24       	eor	r1, r1
    1800:	2f 93       	push	r18
    1802:	3f 93       	push	r19
    1804:	4f 93       	push	r20
    1806:	5f 93       	push	r21
    1808:	6f 93       	push	r22
    180a:	7f 93       	push	r23
    180c:	8f 93       	push	r24
    180e:	9f 93       	push	r25
    1810:	af 93       	push	r26
    1812:	bf 93       	push	r27
    1814:	ef 93       	push	r30
    1816:	ff 93       	push	r31
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
	if(INT0_callBack_Ptr != NULL)
    1820:	80 91 92 01 	lds	r24, 0x0192
    1824:	90 91 93 01 	lds	r25, 0x0193
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	29 f0       	breq	.+10     	; 0x1836 <__vector_1+0x40>
	{

		(*INT0_callBack_Ptr)();
    182c:	e0 91 92 01 	lds	r30, 0x0192
    1830:	f0 91 93 01 	lds	r31, 0x0193
    1834:	09 95       	icall
	}
}
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	ff 91       	pop	r31
    183c:	ef 91       	pop	r30
    183e:	bf 91       	pop	r27
    1840:	af 91       	pop	r26
    1842:	9f 91       	pop	r25
    1844:	8f 91       	pop	r24
    1846:	7f 91       	pop	r23
    1848:	6f 91       	pop	r22
    184a:	5f 91       	pop	r21
    184c:	4f 91       	pop	r20
    184e:	3f 91       	pop	r19
    1850:	2f 91       	pop	r18
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <__vector_2>:


ISR(INT1_vect)
{
    185c:	1f 92       	push	r1
    185e:	0f 92       	push	r0
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	0f 92       	push	r0
    1864:	11 24       	eor	r1, r1
    1866:	2f 93       	push	r18
    1868:	3f 93       	push	r19
    186a:	4f 93       	push	r20
    186c:	5f 93       	push	r21
    186e:	6f 93       	push	r22
    1870:	7f 93       	push	r23
    1872:	8f 93       	push	r24
    1874:	9f 93       	push	r25
    1876:	af 93       	push	r26
    1878:	bf 93       	push	r27
    187a:	ef 93       	push	r30
    187c:	ff 93       	push	r31
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
	if(INT1_callBack_Ptr != NULL)
    1886:	80 91 94 01 	lds	r24, 0x0194
    188a:	90 91 95 01 	lds	r25, 0x0195
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	29 f0       	breq	.+10     	; 0x189c <__vector_2+0x40>
	{

		(*INT1_callBack_Ptr)();
    1892:	e0 91 94 01 	lds	r30, 0x0194
    1896:	f0 91 95 01 	lds	r31, 0x0195
    189a:	09 95       	icall
	}
}
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	7f 91       	pop	r23
    18ae:	6f 91       	pop	r22
    18b0:	5f 91       	pop	r21
    18b2:	4f 91       	pop	r20
    18b4:	3f 91       	pop	r19
    18b6:	2f 91       	pop	r18
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	0f 90       	pop	r0
    18be:	1f 90       	pop	r1
    18c0:	18 95       	reti

000018c2 <__vector_18>:

ISR(INT2_vect)
{
    18c2:	1f 92       	push	r1
    18c4:	0f 92       	push	r0
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	0f 92       	push	r0
    18ca:	11 24       	eor	r1, r1
    18cc:	2f 93       	push	r18
    18ce:	3f 93       	push	r19
    18d0:	4f 93       	push	r20
    18d2:	5f 93       	push	r21
    18d4:	6f 93       	push	r22
    18d6:	7f 93       	push	r23
    18d8:	8f 93       	push	r24
    18da:	9f 93       	push	r25
    18dc:	af 93       	push	r26
    18de:	bf 93       	push	r27
    18e0:	ef 93       	push	r30
    18e2:	ff 93       	push	r31
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
	if(INT2_callBack_Ptr != NULL)
    18ec:	80 91 96 01 	lds	r24, 0x0196
    18f0:	90 91 97 01 	lds	r25, 0x0197
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	29 f0       	breq	.+10     	; 0x1902 <__vector_18+0x40>
	{

		(*INT2_callBack_Ptr)();
    18f8:	e0 91 96 01 	lds	r30, 0x0196
    18fc:	f0 91 97 01 	lds	r31, 0x0197
    1900:	09 95       	icall
	}
}
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	ff 91       	pop	r31
    1908:	ef 91       	pop	r30
    190a:	bf 91       	pop	r27
    190c:	af 91       	pop	r26
    190e:	9f 91       	pop	r25
    1910:	8f 91       	pop	r24
    1912:	7f 91       	pop	r23
    1914:	6f 91       	pop	r22
    1916:	5f 91       	pop	r21
    1918:	4f 91       	pop	r20
    191a:	3f 91       	pop	r19
    191c:	2f 91       	pop	r18
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	0f 90       	pop	r0
    1924:	1f 90       	pop	r1
    1926:	18 95       	reti

00001928 <External_Interrupt_Set_CallBack>:


       /*function to take a pointer of the needed function in main and pass it to the ISR function*/

void External_Interrupt_Set_CallBack(Interrupt_Type INT_Type,  void(*Function_ptr)(void))
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <External_Interrupt_Set_CallBack+0x6>
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	7b 83       	std	Y+3, r23	; 0x03
    1938:	6a 83       	std	Y+2, r22	; 0x02
if(INT_Type==INT_0){INT0_callBack_Ptr = Function_ptr;}
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	88 23       	and	r24, r24
    193e:	39 f4       	brne	.+14     	; 0x194e <External_Interrupt_Set_CallBack+0x26>
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9b 81       	ldd	r25, Y+3	; 0x03
    1944:	90 93 93 01 	sts	0x0193, r25
    1948:	80 93 92 01 	sts	0x0192, r24
    194c:	13 c0       	rjmp	.+38     	; 0x1974 <External_Interrupt_Set_CallBack+0x4c>
else if(INT_Type==INT_1){INT1_callBack_Ptr = Function_ptr;}
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	39 f4       	brne	.+14     	; 0x1962 <External_Interrupt_Set_CallBack+0x3a>
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	9b 81       	ldd	r25, Y+3	; 0x03
    1958:	90 93 95 01 	sts	0x0195, r25
    195c:	80 93 94 01 	sts	0x0194, r24
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <External_Interrupt_Set_CallBack+0x4c>
else if(INT_Type==INT_2){INT2_callBack_Ptr = Function_ptr;}// or we will use just else
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	31 f4       	brne	.+12     	; 0x1974 <External_Interrupt_Set_CallBack+0x4c>
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	9b 81       	ldd	r25, Y+3	; 0x03
    196c:	90 93 97 01 	sts	0x0197, r25
    1970:	80 93 96 01 	sts	0x0196, r24
}
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <External_Interrupt_Init>:




void External_Interrupt_Init(const External_Interrupt_Configuration* Config_Ptr)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	00 d0       	rcall	.+0      	; 0x1986 <External_Interrupt_Init+0x6>
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->INT_Type==INT_0)
    198e:	e9 81       	ldd	r30, Y+1	; 0x01
    1990:	fa 81       	ldd	r31, Y+2	; 0x02
    1992:	80 81       	ld	r24, Z
    1994:	88 23       	and	r24, r24
    1996:	91 f5       	brne	.+100    	; 0x19fc <External_Interrupt_Init+0x7c>
	{
		DDRD=CLEAR_BIT(DDRD, PD2);
    1998:	21 e3       	ldi	r18, 0x31	; 49
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	a1 e3       	ldi	r26, 0x31	; 49
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e1 e3       	ldi	r30, 0x31	; 49
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	8b 7f       	andi	r24, 0xFB	; 251
    19a8:	8c 93       	st	X, r24
    19aa:	8c 91       	ld	r24, X
    19ac:	f9 01       	movw	r30, r18
    19ae:	80 83       	st	Z, r24
		MCUCR = (MCUCR & 0XFC) | (Config_Ptr->INT_control) ;
    19b0:	a5 e5       	ldi	r26, 0x55	; 85
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e5 e5       	ldi	r30, 0x55	; 85
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	98 2f       	mov	r25, r24
    19bc:	9c 7f       	andi	r25, 0xFC	; 252
    19be:	e9 81       	ldd	r30, Y+1	; 0x01
    19c0:	fa 81       	ldd	r31, Y+2	; 0x02
    19c2:	81 81       	ldd	r24, Z+1	; 0x01
    19c4:	89 2b       	or	r24, r25
    19c6:	8c 93       	st	X, r24
		GICR = (GICR& 0XBF) | (1<<INT0);
    19c8:	ab e5       	ldi	r26, 0x5B	; 91
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	eb e5       	ldi	r30, 0x5B	; 91
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	80 64       	ori	r24, 0x40	; 64
    19d4:	8c 93       	st	X, r24
		if(Config_Ptr->INT_Pull_up_option==ENABLE)
    19d6:	e9 81       	ldd	r30, Y+1	; 0x01
    19d8:	fa 81       	ldd	r31, Y+2	; 0x02
    19da:	82 81       	ldd	r24, Z+2	; 0x02
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	09 f0       	breq	.+2      	; 0x19e2 <External_Interrupt_Init+0x62>
    19e0:	8e c0       	rjmp	.+284    	; 0x1afe <External_Interrupt_Init+0x17e>
		{
			PORTD = SET_BIT(PORTD,  PD2);
    19e2:	22 e3       	ldi	r18, 0x32	; 50
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	a2 e3       	ldi	r26, 0x32	; 50
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e2 e3       	ldi	r30, 0x32	; 50
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	84 60       	ori	r24, 0x04	; 4
    19f2:	8c 93       	st	X, r24
    19f4:	8c 91       	ld	r24, X
    19f6:	f9 01       	movw	r30, r18
    19f8:	80 83       	st	Z, r24
    19fa:	81 c0       	rjmp	.+258    	; 0x1afe <External_Interrupt_Init+0x17e>
		}
	}
	else if(Config_Ptr->INT_Type==INT_1)
    19fc:	e9 81       	ldd	r30, Y+1	; 0x01
    19fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1a00:	80 81       	ld	r24, Z
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	c1 f5       	brne	.+112    	; 0x1a76 <External_Interrupt_Init+0xf6>
	{

		DDRD=CLEAR_BIT(DDRD, PD3);
    1a06:	21 e3       	ldi	r18, 0x31	; 49
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	a1 e3       	ldi	r26, 0x31	; 49
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e1 e3       	ldi	r30, 0x31	; 49
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	87 7f       	andi	r24, 0xF7	; 247
    1a16:	8c 93       	st	X, r24
    1a18:	8c 91       	ld	r24, X
    1a1a:	f9 01       	movw	r30, r18
    1a1c:	80 83       	st	Z, r24
		MCUCR = (MCUCR & 0XF3) |((Config_Ptr->INT_control)<<2) ;
    1a1e:	a5 e5       	ldi	r26, 0x55	; 85
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e5       	ldi	r30, 0x55	; 85
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	28 2f       	mov	r18, r24
    1a2a:	23 7f       	andi	r18, 0xF3	; 243
    1a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a30:	81 81       	ldd	r24, Z+1	; 0x01
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	82 2b       	or	r24, r18
    1a40:	8c 93       	st	X, r24
		GICR = (GICR& 0X7F) | (1<<INT1);
    1a42:	ab e5       	ldi	r26, 0x5B	; 91
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	eb e5       	ldi	r30, 0x5B	; 91
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 68       	ori	r24, 0x80	; 128
    1a4e:	8c 93       	st	X, r24
		if(Config_Ptr->INT_Pull_up_option==ENABLE)
    1a50:	e9 81       	ldd	r30, Y+1	; 0x01
    1a52:	fa 81       	ldd	r31, Y+2	; 0x02
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <External_Interrupt_Init+0xdc>
    1a5a:	51 c0       	rjmp	.+162    	; 0x1afe <External_Interrupt_Init+0x17e>
		{
			PORTD = SET_BIT(PORTD,  PD3);
    1a5c:	22 e3       	ldi	r18, 0x32	; 50
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	a2 e3       	ldi	r26, 0x32	; 50
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e2 e3       	ldi	r30, 0x32	; 50
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	88 60       	ori	r24, 0x08	; 8
    1a6c:	8c 93       	st	X, r24
    1a6e:	8c 91       	ld	r24, X
    1a70:	f9 01       	movw	r30, r18
    1a72:	80 83       	st	Z, r24
    1a74:	44 c0       	rjmp	.+136    	; 0x1afe <External_Interrupt_Init+0x17e>
		}
	}
	else if(Config_Ptr->INT_Type==INT_2)
    1a76:	e9 81       	ldd	r30, Y+1	; 0x01
    1a78:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7a:	80 81       	ld	r24, Z
    1a7c:	82 30       	cpi	r24, 0x02	; 2
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <External_Interrupt_Init+0x102>
    1a80:	3e c0       	rjmp	.+124    	; 0x1afe <External_Interrupt_Init+0x17e>
	{

		DDRB=CLEAR_BIT(DDRB, PB2);
    1a82:	27 e3       	ldi	r18, 0x37	; 55
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	a7 e3       	ldi	r26, 0x37	; 55
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e7 e3       	ldi	r30, 0x37	; 55
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8b 7f       	andi	r24, 0xFB	; 251
    1a92:	8c 93       	st	X, r24
    1a94:	8c 91       	ld	r24, X
    1a96:	f9 01       	movw	r30, r18
    1a98:	80 83       	st	Z, r24
		MCUCSR = (MCUCSR & 0XBF) | ( ((Config_Ptr->INT_control) & 0X01)<< ISC2) ;
    1a9a:	a4 e5       	ldi	r26, 0x54	; 84
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e4 e5       	ldi	r30, 0x54	; 84
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	2f 7b       	andi	r18, 0xBF	; 191
    1aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1aac:	81 81       	ldd	r24, Z+1	; 0x01
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	81 70       	andi	r24, 0x01	; 1
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	00 24       	eor	r0, r0
    1ab8:	96 95       	lsr	r25
    1aba:	87 95       	ror	r24
    1abc:	07 94       	ror	r0
    1abe:	96 95       	lsr	r25
    1ac0:	87 95       	ror	r24
    1ac2:	07 94       	ror	r0
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	80 2d       	mov	r24, r0
    1ac8:	82 2b       	or	r24, r18
    1aca:	8c 93       	st	X, r24
		GICR = (GICR& 0XCF) | (1<<INT2);
    1acc:	ab e5       	ldi	r26, 0x5B	; 91
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	eb e5       	ldi	r30, 0x5B	; 91
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8f 7c       	andi	r24, 0xCF	; 207
    1ad8:	80 62       	ori	r24, 0x20	; 32
    1ada:	8c 93       	st	X, r24
		if(Config_Ptr->INT_Pull_up_option==ENABLE)
    1adc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ade:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	61 f4       	brne	.+24     	; 0x1afe <External_Interrupt_Init+0x17e>
		{
			PORTB = SET_BIT(PORTB,  PB2);
    1ae6:	28 e3       	ldi	r18, 0x38	; 56
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	a8 e3       	ldi	r26, 0x38	; 56
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e8 e3       	ldi	r30, 0x38	; 56
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	84 60       	ori	r24, 0x04	; 4
    1af6:	8c 93       	st	X, r24
    1af8:	8c 91       	ld	r24, X
    1afa:	f9 01       	movw	r30, r18
    1afc:	80 83       	st	Z, r24
		}
	}// or we will use just else

}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <External_Interrupt_Deinit>:




void External_Interrupt_Deinit(Interrupt_Type INT_Type)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	89 83       	std	Y+1, r24	; 0x01

	if(INT_Type==INT_0)
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	88 23       	and	r24, r24
    1b18:	29 f5       	brne	.+74     	; 0x1b64 <External_Interrupt_Deinit+0x5c>
	{
		// MCUCR = ( MCUCR & 0XFC);
		 MCUCR=CLEAR_BIT(MCUCR,ISC00);
    1b1a:	25 e5       	ldi	r18, 0x55	; 85
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	a5 e5       	ldi	r26, 0x55	; 85
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e5       	ldi	r30, 0x55	; 85
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8e 7f       	andi	r24, 0xFE	; 254
    1b2a:	8c 93       	st	X, r24
    1b2c:	8c 91       	ld	r24, X
    1b2e:	f9 01       	movw	r30, r18
    1b30:	80 83       	st	Z, r24
		 MCUCR=CLEAR_BIT(MCUCR,ISC01);
    1b32:	25 e5       	ldi	r18, 0x55	; 85
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	a5 e5       	ldi	r26, 0x55	; 85
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e5 e5       	ldi	r30, 0x55	; 85
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8d 7f       	andi	r24, 0xFD	; 253
    1b42:	8c 93       	st	X, r24
    1b44:	8c 91       	ld	r24, X
    1b46:	f9 01       	movw	r30, r18
    1b48:	80 83       	st	Z, r24
		// GICR = (GICR & 0XBF);
		 GICR=CLEAR_BIT( GICR,INT0);
    1b4a:	2b e5       	ldi	r18, 0x5B	; 91
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	ab e5       	ldi	r26, 0x5B	; 91
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	eb e5       	ldi	r30, 0x5B	; 91
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8f 7b       	andi	r24, 0xBF	; 191
    1b5a:	8c 93       	st	X, r24
    1b5c:	8c 91       	ld	r24, X
    1b5e:	f9 01       	movw	r30, r18
    1b60:	80 83       	st	Z, r24
    1b62:	43 c0       	rjmp	.+134    	; 0x1bea <External_Interrupt_Deinit+0xe2>

	}
	else if(INT_Type==INT_1)
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	29 f5       	brne	.+74     	; 0x1bb4 <External_Interrupt_Deinit+0xac>
	{
		// MCUCR = ( MCUCR & 0XF3);
		 MCUCR=CLEAR_BIT(MCUCR,ISC10);
    1b6a:	25 e5       	ldi	r18, 0x55	; 85
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	a5 e5       	ldi	r26, 0x55	; 85
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e5 e5       	ldi	r30, 0x55	; 85
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	8b 7f       	andi	r24, 0xFB	; 251
    1b7a:	8c 93       	st	X, r24
    1b7c:	8c 91       	ld	r24, X
    1b7e:	f9 01       	movw	r30, r18
    1b80:	80 83       	st	Z, r24
		 MCUCR=CLEAR_BIT(MCUCR,ISC11);
    1b82:	25 e5       	ldi	r18, 0x55	; 85
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	a5 e5       	ldi	r26, 0x55	; 85
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e5 e5       	ldi	r30, 0x55	; 85
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	87 7f       	andi	r24, 0xF7	; 247
    1b92:	8c 93       	st	X, r24
    1b94:	8c 91       	ld	r24, X
    1b96:	f9 01       	movw	r30, r18
    1b98:	80 83       	st	Z, r24
		// GICR = (GICR & 0X7F);
		 GICR=CLEAR_BIT( GICR,INT1);
    1b9a:	2b e5       	ldi	r18, 0x5B	; 91
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	ab e5       	ldi	r26, 0x5B	; 91
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	eb e5       	ldi	r30, 0x5B	; 91
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8f 77       	andi	r24, 0x7F	; 127
    1baa:	8c 93       	st	X, r24
    1bac:	8c 91       	ld	r24, X
    1bae:	f9 01       	movw	r30, r18
    1bb0:	80 83       	st	Z, r24
    1bb2:	1b c0       	rjmp	.+54     	; 0x1bea <External_Interrupt_Deinit+0xe2>
	}
	else if(INT_Type==INT_2)
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	c1 f4       	brne	.+48     	; 0x1bea <External_Interrupt_Deinit+0xe2>
	{
		//MCUCSR = (MCUCSR & 0XBF);
		MCUCSR=CLEAR_BIT(MCUCSR,ISC2);
    1bba:	24 e5       	ldi	r18, 0x54	; 84
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	a4 e5       	ldi	r26, 0x54	; 84
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e4 e5       	ldi	r30, 0x54	; 84
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8f 7b       	andi	r24, 0xBF	; 191
    1bca:	8c 93       	st	X, r24
    1bcc:	8c 91       	ld	r24, X
    1bce:	f9 01       	movw	r30, r18
    1bd0:	80 83       	st	Z, r24
	//	GICR = (GICR & 0XCF);
		 GICR=CLEAR_BIT( GICR,INT2);
    1bd2:	2b e5       	ldi	r18, 0x5B	; 91
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	ab e5       	ldi	r26, 0x5B	; 91
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	eb e5       	ldi	r30, 0x5B	; 91
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8f 7d       	andi	r24, 0xDF	; 223
    1be2:	8c 93       	st	X, r24
    1be4:	8c 91       	ld	r24, X
    1be6:	f9 01       	movw	r30, r18
    1be8:	80 83       	st	Z, r24
	}// or we will use just else

}
    1bea:	0f 90       	pop	r0
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1bfa:	a4 e3       	ldi	r26, 0x34	; 52
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e4 e3       	ldi	r30, 0x34	; 52
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	87 60       	ori	r24, 0x07	; 7
    1c06:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1c08:	a4 e3       	ldi	r26, 0x34	; 52
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e4 e3       	ldi	r30, 0x34	; 52
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	80 6f       	ori	r24, 0xF0	; 240
    1c14:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1c1c:	88 e2       	ldi	r24, 0x28	; 40
    1c1e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1c22:	8c e0       	ldi	r24, 0x0C	; 12
    1c24:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_sendCommand>
}
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	c3 56       	subi	r28, 0x63	; 99
    1c42:	d0 40       	sbci	r29, 0x00	; 0
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ed 59       	subi	r30, 0x9D	; 157
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1c56:	a5 e3       	ldi	r26, 0x35	; 53
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e5 e3       	ldi	r30, 0x35	; 53
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	8e 7f       	andi	r24, 0xFE	; 254
    1c62:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1c64:	a5 e3       	ldi	r26, 0x35	; 53
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e5 e3       	ldi	r30, 0x35	; 53
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8d 7f       	andi	r24, 0xFD	; 253
    1c70:	8c 93       	st	X, r24
    1c72:	fe 01       	movw	r30, r28
    1c74:	e1 5a       	subi	r30, 0xA1	; 161
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e8       	ldi	r26, 0x80	; 128
    1c7e:	bf e3       	ldi	r27, 0x3F	; 63
    1c80:	80 83       	st	Z, r24
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	a2 83       	std	Z+2, r26	; 0x02
    1c86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	8e 01       	movw	r16, r28
    1c8a:	05 5a       	subi	r16, 0xA5	; 165
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e1 5a       	subi	r30, 0xA1	; 161
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a e7       	ldi	r20, 0x7A	; 122
    1ca2:	53 e4       	ldi	r21, 0x43	; 67
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	f8 01       	movw	r30, r16
    1cae:	80 83       	st	Z, r24
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	a2 83       	std	Z+2, r26	; 0x02
    1cb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e5 5a       	subi	r30, 0xA5	; 165
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	44 f4       	brge	.+16     	; 0x1ce4 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e7 5a       	subi	r30, 0xA7	; 167
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	80 83       	st	Z, r24
    1ce2:	64 c0       	rjmp	.+200    	; 0x1dac <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e5 5a       	subi	r30, 0xA5	; 165
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	4f e7       	ldi	r20, 0x7F	; 127
    1cf8:	57 e4       	ldi	r21, 0x47	; 71
    1cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <LCD_sendCommand+0xd0>
    1d02:	43 c0       	rjmp	.+134    	; 0x1d8a <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	fe 01       	movw	r30, r28
    1d06:	e1 5a       	subi	r30, 0xA1	; 161
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8e 01       	movw	r16, r28
    1d24:	07 5a       	subi	r16, 0xA7	; 167
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	f8 01       	movw	r30, r16
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	1f c0       	rjmp	.+62     	; 0x1d7a <LCD_sendCommand+0x146>
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e9 5a       	subi	r30, 0xA9	; 169
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	89 e1       	ldi	r24, 0x19	; 25
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e9 5a       	subi	r30, 0xA9	; 169
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_sendCommand+0x120>
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e9 5a       	subi	r30, 0xA9	; 169
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	de 01       	movw	r26, r28
    1d64:	a7 5a       	subi	r26, 0xA7	; 167
    1d66:	bf 4f       	sbci	r27, 0xFF	; 255
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e7 5a       	subi	r30, 0xA7	; 167
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	11 96       	adiw	r26, 0x01	; 1
    1d76:	9c 93       	st	X, r25
    1d78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e7 5a       	subi	r30, 0xA7	; 167
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 81       	ld	r24, Z
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	d1 f6       	brne	.-76     	; 0x1d3c <LCD_sendCommand+0x108>
    1d88:	27 c0       	rjmp	.+78     	; 0x1dd8 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	07 5a       	subi	r16, 0xA7	; 167
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	fe 01       	movw	r30, r28
    1d92:	e5 5a       	subi	r30, 0xA5	; 165
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	f8 01       	movw	r30, r16
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
    1dac:	de 01       	movw	r26, r28
    1dae:	ab 5a       	subi	r26, 0xAB	; 171
    1db0:	bf 4f       	sbci	r27, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	e7 5a       	subi	r30, 0xA7	; 167
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	8d 93       	st	X+, r24
    1dbe:	9c 93       	st	X, r25
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	eb 5a       	subi	r30, 0xAB	; 171
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	91 81       	ldd	r25, Z+1	; 0x01
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <LCD_sendCommand+0x196>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	eb 5a       	subi	r30, 0xAB	; 171
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1dd8:	a5 e3       	ldi	r26, 0x35	; 53
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e5 e3       	ldi	r30, 0x35	; 53
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	84 60       	ori	r24, 0x04	; 4
    1de4:	8c 93       	st	X, r24
    1de6:	fe 01       	movw	r30, r28
    1de8:	ef 5a       	subi	r30, 0xAF	; 175
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a0 e8       	ldi	r26, 0x80	; 128
    1df2:	bf e3       	ldi	r27, 0x3F	; 63
    1df4:	80 83       	st	Z, r24
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	a2 83       	std	Z+2, r26	; 0x02
    1dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	8e 01       	movw	r16, r28
    1dfe:	03 5b       	subi	r16, 0xB3	; 179
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	fe 01       	movw	r30, r28
    1e04:	ef 5a       	subi	r30, 0xAF	; 175
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a e7       	ldi	r20, 0x7A	; 122
    1e16:	53 e4       	ldi	r21, 0x43	; 67
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	80 83       	st	Z, r24
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	a2 83       	std	Z+2, r26	; 0x02
    1e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e3 5b       	subi	r30, 0xB3	; 179
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	44 f4       	brge	.+16     	; 0x1e58 <LCD_sendCommand+0x224>
		__ticks = 1;
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e5 5b       	subi	r30, 0xB5	; 181
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
    1e56:	64 c0       	rjmp	.+200    	; 0x1f20 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e3 5b       	subi	r30, 0xB3	; 179
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	60 81       	ld	r22, Z
    1e60:	71 81       	ldd	r23, Z+1	; 0x01
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	3f ef       	ldi	r19, 0xFF	; 255
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	57 e4       	ldi	r21, 0x47	; 71
    1e6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	0c f0       	brlt	.+2      	; 0x1e78 <LCD_sendCommand+0x244>
    1e76:	43 c0       	rjmp	.+134    	; 0x1efe <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ef 5a       	subi	r30, 0xAF	; 175
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8e 01       	movw	r16, r28
    1e98:	05 5b       	subi	r16, 0xB5	; 181
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
    1eae:	1f c0       	rjmp	.+62     	; 0x1eee <LCD_sendCommand+0x2ba>
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e7 5b       	subi	r30, 0xB7	; 183
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	89 e1       	ldi	r24, 0x19	; 25
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	80 83       	st	Z, r24
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e7 5b       	subi	r30, 0xB7	; 183
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_sendCommand+0x294>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e7 5b       	subi	r30, 0xB7	; 183
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	de 01       	movw	r26, r28
    1ed8:	a5 5b       	subi	r26, 0xB5	; 181
    1eda:	bf 4f       	sbci	r27, 0xFF	; 255
    1edc:	fe 01       	movw	r30, r28
    1ede:	e5 5b       	subi	r30, 0xB5	; 181
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	9c 93       	st	X, r25
    1eec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e5 5b       	subi	r30, 0xB5	; 181
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	d1 f6       	brne	.-76     	; 0x1eb0 <LCD_sendCommand+0x27c>
    1efc:	27 c0       	rjmp	.+78     	; 0x1f4c <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efe:	8e 01       	movw	r16, r28
    1f00:	05 5b       	subi	r16, 0xB5	; 181
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	fe 01       	movw	r30, r28
    1f06:	e3 5b       	subi	r30, 0xB3	; 179
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
    1f20:	de 01       	movw	r26, r28
    1f22:	a9 5b       	subi	r26, 0xB9	; 185
    1f24:	bf 4f       	sbci	r27, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	e5 5b       	subi	r30, 0xB5	; 181
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	91 81       	ldd	r25, Z+1	; 0x01
    1f30:	8d 93       	st	X+, r24
    1f32:	9c 93       	st	X, r25
    1f34:	fe 01       	movw	r30, r28
    1f36:	e9 5b       	subi	r30, 0xB9	; 185
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 81       	ld	r24, Z
    1f3c:	91 81       	ldd	r25, Z+1	; 0x01
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_sendCommand+0x30a>
    1f42:	fe 01       	movw	r30, r28
    1f44:	e9 5b       	subi	r30, 0xB9	; 185
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1f4c:	a5 e3       	ldi	r26, 0x35	; 53
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e5 e3       	ldi	r30, 0x35	; 53
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	98 2f       	mov	r25, r24
    1f58:	9f 70       	andi	r25, 0x0F	; 15
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	ed 59       	subi	r30, 0x9D	; 157
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	80 7f       	andi	r24, 0xF0	; 240
    1f64:	89 2b       	or	r24, r25
    1f66:	8c 93       	st	X, r24
    1f68:	fe 01       	movw	r30, r28
    1f6a:	ed 5b       	subi	r30, 0xBD	; 189
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	a0 e8       	ldi	r26, 0x80	; 128
    1f74:	bf e3       	ldi	r27, 0x3F	; 63
    1f76:	80 83       	st	Z, r24
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	a2 83       	std	Z+2, r26	; 0x02
    1f7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7e:	8e 01       	movw	r16, r28
    1f80:	01 5c       	subi	r16, 0xC1	; 193
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	fe 01       	movw	r30, r28
    1f86:	ed 5b       	subi	r30, 0xBD	; 189
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4a e7       	ldi	r20, 0x7A	; 122
    1f98:	53 e4       	ldi	r21, 0x43	; 67
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	f8 01       	movw	r30, r16
    1fa4:	80 83       	st	Z, r24
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	a2 83       	std	Z+2, r26	; 0x02
    1faa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fac:	fe 01       	movw	r30, r28
    1fae:	ff 96       	adiw	r30, 0x3f	; 63
    1fb0:	60 81       	ld	r22, Z
    1fb2:	71 81       	ldd	r23, Z+1	; 0x01
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	93 81       	ldd	r25, Z+3	; 0x03
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e8       	ldi	r20, 0x80	; 128
    1fbe:	5f e3       	ldi	r21, 0x3F	; 63
    1fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fc4:	88 23       	and	r24, r24
    1fc6:	2c f4       	brge	.+10     	; 0x1fd2 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9e af       	std	Y+62, r25	; 0x3e
    1fce:	8d af       	std	Y+61, r24	; 0x3d
    1fd0:	46 c0       	rjmp	.+140    	; 0x205e <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ff 96       	adiw	r30, 0x3f	; 63
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	57 e4       	ldi	r21, 0x47	; 71
    1fe6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	64 f5       	brge	.+88     	; 0x2046 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ed 5b       	subi	r30, 0xBD	; 189
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e2       	ldi	r20, 0x20	; 32
    2002:	51 e4       	ldi	r21, 0x41	; 65
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e af       	std	Y+62, r25	; 0x3e
    201a:	8d af       	std	Y+61, r24	; 0x3d
    201c:	0f c0       	rjmp	.+30     	; 0x203c <LCD_sendCommand+0x408>
    201e:	89 e1       	ldi	r24, 0x19	; 25
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9c af       	std	Y+60, r25	; 0x3c
    2024:	8b af       	std	Y+59, r24	; 0x3b
    2026:	8b ad       	ldd	r24, Y+59	; 0x3b
    2028:	9c ad       	ldd	r25, Y+60	; 0x3c
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_sendCommand+0x3f6>
    202e:	9c af       	std	Y+60, r25	; 0x3c
    2030:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2032:	8d ad       	ldd	r24, Y+61	; 0x3d
    2034:	9e ad       	ldd	r25, Y+62	; 0x3e
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	9e af       	std	Y+62, r25	; 0x3e
    203a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203c:	8d ad       	ldd	r24, Y+61	; 0x3d
    203e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	69 f7       	brne	.-38     	; 0x201e <LCD_sendCommand+0x3ea>
    2044:	16 c0       	rjmp	.+44     	; 0x2072 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2046:	fe 01       	movw	r30, r28
    2048:	ff 96       	adiw	r30, 0x3f	; 63
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e af       	std	Y+62, r25	; 0x3e
    205c:	8d af       	std	Y+61, r24	; 0x3d
    205e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2060:	9e ad       	ldd	r25, Y+62	; 0x3e
    2062:	9a af       	std	Y+58, r25	; 0x3a
    2064:	89 af       	std	Y+57, r24	; 0x39
    2066:	89 ad       	ldd	r24, Y+57	; 0x39
    2068:	9a ad       	ldd	r25, Y+58	; 0x3a
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_sendCommand+0x436>
    206e:	9a af       	std	Y+58, r25	; 0x3a
    2070:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2072:	a5 e3       	ldi	r26, 0x35	; 53
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e5 e3       	ldi	r30, 0x35	; 53
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8b 7f       	andi	r24, 0xFB	; 251
    207e:	8c 93       	st	X, r24
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a0 e8       	ldi	r26, 0x80	; 128
    2086:	bf e3       	ldi	r27, 0x3F	; 63
    2088:	8d ab       	std	Y+53, r24	; 0x35
    208a:	9e ab       	std	Y+54, r25	; 0x36
    208c:	af ab       	std	Y+55, r26	; 0x37
    208e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	6d a9       	ldd	r22, Y+53	; 0x35
    2092:	7e a9       	ldd	r23, Y+54	; 0x36
    2094:	8f a9       	ldd	r24, Y+55	; 0x37
    2096:	98 ad       	ldd	r25, Y+56	; 0x38
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a e7       	ldi	r20, 0x7A	; 122
    209e:	53 e4       	ldi	r21, 0x43	; 67
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	89 ab       	std	Y+49, r24	; 0x31
    20aa:	9a ab       	std	Y+50, r25	; 0x32
    20ac:	ab ab       	std	Y+51, r26	; 0x33
    20ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20b0:	69 a9       	ldd	r22, Y+49	; 0x31
    20b2:	7a a9       	ldd	r23, Y+50	; 0x32
    20b4:	8b a9       	ldd	r24, Y+51	; 0x33
    20b6:	9c a9       	ldd	r25, Y+52	; 0x34
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <LCD_sendCommand+0x49e>
		__ticks = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	98 ab       	std	Y+48, r25	; 0x30
    20ce:	8f a7       	std	Y+47, r24	; 0x2f
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    20d2:	69 a9       	ldd	r22, Y+49	; 0x31
    20d4:	7a a9       	ldd	r23, Y+50	; 0x32
    20d6:	8b a9       	ldd	r24, Y+51	; 0x33
    20d8:	9c a9       	ldd	r25, Y+52	; 0x34
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	4c f5       	brge	.+82     	; 0x213c <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	6d a9       	ldd	r22, Y+53	; 0x35
    20ec:	7e a9       	ldd	r23, Y+54	; 0x36
    20ee:	8f a9       	ldd	r24, Y+55	; 0x37
    20f0:	98 ad       	ldd	r25, Y+56	; 0x38
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e2       	ldi	r20, 0x20	; 32
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	98 ab       	std	Y+48, r25	; 0x30
    2110:	8f a7       	std	Y+47, r24	; 0x2f
    2112:	0f c0       	rjmp	.+30     	; 0x2132 <LCD_sendCommand+0x4fe>
    2114:	89 e1       	ldi	r24, 0x19	; 25
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9e a7       	std	Y+46, r25	; 0x2e
    211a:	8d a7       	std	Y+45, r24	; 0x2d
    211c:	8d a5       	ldd	r24, Y+45	; 0x2d
    211e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <LCD_sendCommand+0x4ec>
    2124:	9e a7       	std	Y+46, r25	; 0x2e
    2126:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	8f a5       	ldd	r24, Y+47	; 0x2f
    212a:	98 a9       	ldd	r25, Y+48	; 0x30
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	98 ab       	std	Y+48, r25	; 0x30
    2130:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	8f a5       	ldd	r24, Y+47	; 0x2f
    2134:	98 a9       	ldd	r25, Y+48	; 0x30
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	69 f7       	brne	.-38     	; 0x2114 <LCD_sendCommand+0x4e0>
    213a:	14 c0       	rjmp	.+40     	; 0x2164 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213c:	69 a9       	ldd	r22, Y+49	; 0x31
    213e:	7a a9       	ldd	r23, Y+50	; 0x32
    2140:	8b a9       	ldd	r24, Y+51	; 0x33
    2142:	9c a9       	ldd	r25, Y+52	; 0x34
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	98 ab       	std	Y+48, r25	; 0x30
    214e:	8f a7       	std	Y+47, r24	; 0x2f
    2150:	8f a5       	ldd	r24, Y+47	; 0x2f
    2152:	98 a9       	ldd	r25, Y+48	; 0x30
    2154:	9c a7       	std	Y+44, r25	; 0x2c
    2156:	8b a7       	std	Y+43, r24	; 0x2b
    2158:	8b a5       	ldd	r24, Y+43	; 0x2b
    215a:	9c a5       	ldd	r25, Y+44	; 0x2c
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <LCD_sendCommand+0x528>
    2160:	9c a7       	std	Y+44, r25	; 0x2c
    2162:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2164:	a5 e3       	ldi	r26, 0x35	; 53
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e5 e3       	ldi	r30, 0x35	; 53
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	84 60       	ori	r24, 0x04	; 4
    2170:	8c 93       	st	X, r24
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a0 e8       	ldi	r26, 0x80	; 128
    2178:	bf e3       	ldi	r27, 0x3F	; 63
    217a:	8f a3       	std	Y+39, r24	; 0x27
    217c:	98 a7       	std	Y+40, r25	; 0x28
    217e:	a9 a7       	std	Y+41, r26	; 0x29
    2180:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2182:	6f a1       	ldd	r22, Y+39	; 0x27
    2184:	78 a5       	ldd	r23, Y+40	; 0x28
    2186:	89 a5       	ldd	r24, Y+41	; 0x29
    2188:	9a a5       	ldd	r25, Y+42	; 0x2a
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a e7       	ldi	r20, 0x7A	; 122
    2190:	53 e4       	ldi	r21, 0x43	; 67
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	8b a3       	std	Y+35, r24	; 0x23
    219c:	9c a3       	std	Y+36, r25	; 0x24
    219e:	ad a3       	std	Y+37, r26	; 0x25
    21a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21a2:	6b a1       	ldd	r22, Y+35	; 0x23
    21a4:	7c a1       	ldd	r23, Y+36	; 0x24
    21a6:	8d a1       	ldd	r24, Y+37	; 0x25
    21a8:	9e a1       	ldd	r25, Y+38	; 0x26
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e8       	ldi	r20, 0x80	; 128
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b6:	88 23       	and	r24, r24
    21b8:	2c f4       	brge	.+10     	; 0x21c4 <LCD_sendCommand+0x590>
		__ticks = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9a a3       	std	Y+34, r25	; 0x22
    21c0:	89 a3       	std	Y+33, r24	; 0x21
    21c2:	3f c0       	rjmp	.+126    	; 0x2242 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    21c4:	6b a1       	ldd	r22, Y+35	; 0x23
    21c6:	7c a1       	ldd	r23, Y+36	; 0x24
    21c8:	8d a1       	ldd	r24, Y+37	; 0x25
    21ca:	9e a1       	ldd	r25, Y+38	; 0x26
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	3f ef       	ldi	r19, 0xFF	; 255
    21d0:	4f e7       	ldi	r20, 0x7F	; 127
    21d2:	57 e4       	ldi	r21, 0x47	; 71
    21d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d8:	18 16       	cp	r1, r24
    21da:	4c f5       	brge	.+82     	; 0x222e <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21dc:	6f a1       	ldd	r22, Y+39	; 0x27
    21de:	78 a5       	ldd	r23, Y+40	; 0x28
    21e0:	89 a5       	ldd	r24, Y+41	; 0x29
    21e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e2       	ldi	r20, 0x20	; 32
    21ea:	51 e4       	ldi	r21, 0x41	; 65
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	bc 01       	movw	r22, r24
    21f6:	cd 01       	movw	r24, r26
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9a a3       	std	Y+34, r25	; 0x22
    2202:	89 a3       	std	Y+33, r24	; 0x21
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <LCD_sendCommand+0x5f0>
    2206:	89 e1       	ldi	r24, 0x19	; 25
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	98 a3       	std	Y+32, r25	; 0x20
    220c:	8f 8f       	std	Y+31, r24	; 0x1f
    220e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2210:	98 a1       	ldd	r25, Y+32	; 0x20
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_sendCommand+0x5de>
    2216:	98 a3       	std	Y+32, r25	; 0x20
    2218:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221a:	89 a1       	ldd	r24, Y+33	; 0x21
    221c:	9a a1       	ldd	r25, Y+34	; 0x22
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	9a a3       	std	Y+34, r25	; 0x22
    2222:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	89 a1       	ldd	r24, Y+33	; 0x21
    2226:	9a a1       	ldd	r25, Y+34	; 0x22
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	69 f7       	brne	.-38     	; 0x2206 <LCD_sendCommand+0x5d2>
    222c:	14 c0       	rjmp	.+40     	; 0x2256 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222e:	6b a1       	ldd	r22, Y+35	; 0x23
    2230:	7c a1       	ldd	r23, Y+36	; 0x24
    2232:	8d a1       	ldd	r24, Y+37	; 0x25
    2234:	9e a1       	ldd	r25, Y+38	; 0x26
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9a a3       	std	Y+34, r25	; 0x22
    2240:	89 a3       	std	Y+33, r24	; 0x21
    2242:	89 a1       	ldd	r24, Y+33	; 0x21
    2244:	9a a1       	ldd	r25, Y+34	; 0x22
    2246:	9e 8f       	std	Y+30, r25	; 0x1e
    2248:	8d 8f       	std	Y+29, r24	; 0x1d
    224a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    224c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <LCD_sendCommand+0x61a>
    2252:	9e 8f       	std	Y+30, r25	; 0x1e
    2254:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    2256:	a5 e3       	ldi	r26, 0x35	; 53
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e5 e3       	ldi	r30, 0x35	; 53
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	28 2f       	mov	r18, r24
    2262:	2f 70       	andi	r18, 0x0F	; 15
    2264:	fe 01       	movw	r30, r28
    2266:	ed 59       	subi	r30, 0x9D	; 157
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	82 95       	swap	r24
    2272:	92 95       	swap	r25
    2274:	90 7f       	andi	r25, 0xF0	; 240
    2276:	98 27       	eor	r25, r24
    2278:	80 7f       	andi	r24, 0xF0	; 240
    227a:	98 27       	eor	r25, r24
    227c:	82 2b       	or	r24, r18
    227e:	8c 93       	st	X, r24
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 e8       	ldi	r26, 0x80	; 128
    2286:	bf e3       	ldi	r27, 0x3F	; 63
    2288:	89 8f       	std	Y+25, r24	; 0x19
    228a:	9a 8f       	std	Y+26, r25	; 0x1a
    228c:	ab 8f       	std	Y+27, r26	; 0x1b
    228e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2290:	69 8d       	ldd	r22, Y+25	; 0x19
    2292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a e7       	ldi	r20, 0x7A	; 122
    229e:	53 e4       	ldi	r21, 0x43	; 67
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8d 8b       	std	Y+21, r24	; 0x15
    22aa:	9e 8b       	std	Y+22, r25	; 0x16
    22ac:	af 8b       	std	Y+23, r26	; 0x17
    22ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22b0:	6d 89       	ldd	r22, Y+21	; 0x15
    22b2:	7e 89       	ldd	r23, Y+22	; 0x16
    22b4:	8f 89       	ldd	r24, Y+23	; 0x17
    22b6:	98 8d       	ldd	r25, Y+24	; 0x18
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <LCD_sendCommand+0x69e>
		__ticks = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9c 8b       	std	Y+20, r25	; 0x14
    22ce:	8b 8b       	std	Y+19, r24	; 0x13
    22d0:	3f c0       	rjmp	.+126    	; 0x2350 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	4c f5       	brge	.+82     	; 0x233c <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ea:	69 8d       	ldd	r22, Y+25	; 0x19
    22ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e2       	ldi	r20, 0x20	; 32
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9c 8b       	std	Y+20, r25	; 0x14
    2310:	8b 8b       	std	Y+19, r24	; 0x13
    2312:	0f c0       	rjmp	.+30     	; 0x2332 <LCD_sendCommand+0x6fe>
    2314:	89 e1       	ldi	r24, 0x19	; 25
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9a 8b       	std	Y+18, r25	; 0x12
    231a:	89 8b       	std	Y+17, r24	; 0x11
    231c:	89 89       	ldd	r24, Y+17	; 0x11
    231e:	9a 89       	ldd	r25, Y+18	; 0x12
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LCD_sendCommand+0x6ec>
    2324:	9a 8b       	std	Y+18, r25	; 0x12
    2326:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	9c 8b       	std	Y+20, r25	; 0x14
    2330:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	8b 89       	ldd	r24, Y+19	; 0x13
    2334:	9c 89       	ldd	r25, Y+20	; 0x14
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	69 f7       	brne	.-38     	; 0x2314 <LCD_sendCommand+0x6e0>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233c:	6d 89       	ldd	r22, Y+21	; 0x15
    233e:	7e 89       	ldd	r23, Y+22	; 0x16
    2340:	8f 89       	ldd	r24, Y+23	; 0x17
    2342:	98 8d       	ldd	r25, Y+24	; 0x18
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9c 8b       	std	Y+20, r25	; 0x14
    234e:	8b 8b       	std	Y+19, r24	; 0x13
    2350:	8b 89       	ldd	r24, Y+19	; 0x13
    2352:	9c 89       	ldd	r25, Y+20	; 0x14
    2354:	98 8b       	std	Y+16, r25	; 0x10
    2356:	8f 87       	std	Y+15, r24	; 0x0f
    2358:	8f 85       	ldd	r24, Y+15	; 0x0f
    235a:	98 89       	ldd	r25, Y+16	; 0x10
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_sendCommand+0x728>
    2360:	98 8b       	std	Y+16, r25	; 0x10
    2362:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2364:	a5 e3       	ldi	r26, 0x35	; 53
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e5 e3       	ldi	r30, 0x35	; 53
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	8b 7f       	andi	r24, 0xFB	; 251
    2370:	8c 93       	st	X, r24
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a0 e8       	ldi	r26, 0x80	; 128
    2378:	bf e3       	ldi	r27, 0x3F	; 63
    237a:	8b 87       	std	Y+11, r24	; 0x0b
    237c:	9c 87       	std	Y+12, r25	; 0x0c
    237e:	ad 87       	std	Y+13, r26	; 0x0d
    2380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2382:	6b 85       	ldd	r22, Y+11	; 0x0b
    2384:	7c 85       	ldd	r23, Y+12	; 0x0c
    2386:	8d 85       	ldd	r24, Y+13	; 0x0d
    2388:	9e 85       	ldd	r25, Y+14	; 0x0e
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	4a e7       	ldi	r20, 0x7A	; 122
    2390:	53 e4       	ldi	r21, 0x43	; 67
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	8f 83       	std	Y+7, r24	; 0x07
    239c:	98 87       	std	Y+8, r25	; 0x08
    239e:	a9 87       	std	Y+9, r26	; 0x09
    23a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a2:	6f 81       	ldd	r22, Y+7	; 0x07
    23a4:	78 85       	ldd	r23, Y+8	; 0x08
    23a6:	89 85       	ldd	r24, Y+9	; 0x09
    23a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e8       	ldi	r20, 0x80	; 128
    23b0:	5f e3       	ldi	r21, 0x3F	; 63
    23b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <LCD_sendCommand+0x790>
		__ticks = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	3f c0       	rjmp	.+126    	; 0x2442 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	3f ef       	ldi	r19, 0xFF	; 255
    23d0:	4f e7       	ldi	r20, 0x7F	; 127
    23d2:	57 e4       	ldi	r21, 0x47	; 71
    23d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d8:	18 16       	cp	r1, r24
    23da:	4c f5       	brge	.+82     	; 0x242e <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23de:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e2       	ldi	r20, 0x20	; 32
    23ea:	51 e4       	ldi	r21, 0x41	; 65
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
    2404:	0f c0       	rjmp	.+30     	; 0x2424 <LCD_sendCommand+0x7f0>
    2406:	89 e1       	ldi	r24, 0x19	; 25
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9c 83       	std	Y+4, r25	; 0x04
    240c:	8b 83       	std	Y+3, r24	; 0x03
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <LCD_sendCommand+0x7de>
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	69 f7       	brne	.-38     	; 0x2406 <LCD_sendCommand+0x7d2>
    242c:	14 c0       	rjmp	.+40     	; 0x2456 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
    2444:	9e 81       	ldd	r25, Y+6	; 0x06
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <LCD_sendCommand+0x81a>
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2456:	cd 59       	subi	r28, 0x9D	; 157
    2458:	df 4f       	sbci	r29, 0xFF	; 255
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	08 95       	ret

0000246e <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	c3 56       	subi	r28, 0x63	; 99
    247c:	d0 40       	sbci	r29, 0x00	; 0
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	fe 01       	movw	r30, r28
    248a:	ed 59       	subi	r30, 0x9D	; 157
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2490:	a5 e3       	ldi	r26, 0x35	; 53
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e5 e3       	ldi	r30, 0x35	; 53
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	81 60       	ori	r24, 0x01	; 1
    249c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    249e:	a5 e3       	ldi	r26, 0x35	; 53
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e5 e3       	ldi	r30, 0x35	; 53
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	8d 7f       	andi	r24, 0xFD	; 253
    24aa:	8c 93       	st	X, r24
    24ac:	fe 01       	movw	r30, r28
    24ae:	e1 5a       	subi	r30, 0xA1	; 161
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	a0 e8       	ldi	r26, 0x80	; 128
    24b8:	bf e3       	ldi	r27, 0x3F	; 63
    24ba:	80 83       	st	Z, r24
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	a2 83       	std	Z+2, r26	; 0x02
    24c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c2:	8e 01       	movw	r16, r28
    24c4:	05 5a       	subi	r16, 0xA5	; 165
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	fe 01       	movw	r30, r28
    24ca:	e1 5a       	subi	r30, 0xA1	; 161
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	60 81       	ld	r22, Z
    24d0:	71 81       	ldd	r23, Z+1	; 0x01
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a e7       	ldi	r20, 0x7A	; 122
    24dc:	53 e4       	ldi	r21, 0x43	; 67
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	f8 01       	movw	r30, r16
    24e8:	80 83       	st	Z, r24
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	a2 83       	std	Z+2, r26	; 0x02
    24ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24f0:	fe 01       	movw	r30, r28
    24f2:	e5 5a       	subi	r30, 0xA5	; 165
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	44 f4       	brge	.+16     	; 0x251e <LCD_displayCharacter+0xb0>
		__ticks = 1;
    250e:	fe 01       	movw	r30, r28
    2510:	e7 5a       	subi	r30, 0xA7	; 167
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
    251c:	64 c0       	rjmp	.+200    	; 0x25e6 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    251e:	fe 01       	movw	r30, r28
    2520:	e5 5a       	subi	r30, 0xA5	; 165
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	93 81       	ldd	r25, Z+3	; 0x03
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	3f ef       	ldi	r19, 0xFF	; 255
    2530:	4f e7       	ldi	r20, 0x7F	; 127
    2532:	57 e4       	ldi	r21, 0x47	; 71
    2534:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2538:	18 16       	cp	r1, r24
    253a:	0c f0       	brlt	.+2      	; 0x253e <LCD_displayCharacter+0xd0>
    253c:	43 c0       	rjmp	.+134    	; 0x25c4 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253e:	fe 01       	movw	r30, r28
    2540:	e1 5a       	subi	r30, 0xA1	; 161
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	60 81       	ld	r22, Z
    2546:	71 81       	ldd	r23, Z+1	; 0x01
    2548:	82 81       	ldd	r24, Z+2	; 0x02
    254a:	93 81       	ldd	r25, Z+3	; 0x03
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	8e 01       	movw	r16, r28
    255e:	07 5a       	subi	r16, 0xA7	; 167
    2560:	1f 4f       	sbci	r17, 0xFF	; 255
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	f8 01       	movw	r30, r16
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	80 83       	st	Z, r24
    2574:	1f c0       	rjmp	.+62     	; 0x25b4 <LCD_displayCharacter+0x146>
    2576:	fe 01       	movw	r30, r28
    2578:	e9 5a       	subi	r30, 0xA9	; 169
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	89 e1       	ldi	r24, 0x19	; 25
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	80 83       	st	Z, r24
    2584:	fe 01       	movw	r30, r28
    2586:	e9 5a       	subi	r30, 0xA9	; 169
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <LCD_displayCharacter+0x120>
    2592:	fe 01       	movw	r30, r28
    2594:	e9 5a       	subi	r30, 0xA9	; 169
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	de 01       	movw	r26, r28
    259e:	a7 5a       	subi	r26, 0xA7	; 167
    25a0:	bf 4f       	sbci	r27, 0xFF	; 255
    25a2:	fe 01       	movw	r30, r28
    25a4:	e7 5a       	subi	r30, 0xA7	; 167
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 81       	ld	r24, Z
    25aa:	91 81       	ldd	r25, Z+1	; 0x01
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	11 96       	adiw	r26, 0x01	; 1
    25b0:	9c 93       	st	X, r25
    25b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b4:	fe 01       	movw	r30, r28
    25b6:	e7 5a       	subi	r30, 0xA7	; 167
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	d1 f6       	brne	.-76     	; 0x2576 <LCD_displayCharacter+0x108>
    25c2:	27 c0       	rjmp	.+78     	; 0x2612 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	8e 01       	movw	r16, r28
    25c6:	07 5a       	subi	r16, 0xA7	; 167
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	e5 5a       	subi	r30, 0xA5	; 165
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	93 81       	ldd	r25, Z+3	; 0x03
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	f8 01       	movw	r30, r16
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
    25e6:	de 01       	movw	r26, r28
    25e8:	ab 5a       	subi	r26, 0xAB	; 171
    25ea:	bf 4f       	sbci	r27, 0xFF	; 255
    25ec:	fe 01       	movw	r30, r28
    25ee:	e7 5a       	subi	r30, 0xA7	; 167
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	80 81       	ld	r24, Z
    25f4:	91 81       	ldd	r25, Z+1	; 0x01
    25f6:	8d 93       	st	X+, r24
    25f8:	9c 93       	st	X, r25
    25fa:	fe 01       	movw	r30, r28
    25fc:	eb 5a       	subi	r30, 0xAB	; 171
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	91 81       	ldd	r25, Z+1	; 0x01
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_displayCharacter+0x196>
    2608:	fe 01       	movw	r30, r28
    260a:	eb 5a       	subi	r30, 0xAB	; 171
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	91 83       	std	Z+1, r25	; 0x01
    2610:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2612:	a5 e3       	ldi	r26, 0x35	; 53
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e5 e3       	ldi	r30, 0x35	; 53
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	84 60       	ori	r24, 0x04	; 4
    261e:	8c 93       	st	X, r24
    2620:	fe 01       	movw	r30, r28
    2622:	ef 5a       	subi	r30, 0xAF	; 175
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a0 e8       	ldi	r26, 0x80	; 128
    262c:	bf e3       	ldi	r27, 0x3F	; 63
    262e:	80 83       	st	Z, r24
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	a2 83       	std	Z+2, r26	; 0x02
    2634:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2636:	8e 01       	movw	r16, r28
    2638:	03 5b       	subi	r16, 0xB3	; 179
    263a:	1f 4f       	sbci	r17, 0xFF	; 255
    263c:	fe 01       	movw	r30, r28
    263e:	ef 5a       	subi	r30, 0xAF	; 175
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	4a e7       	ldi	r20, 0x7A	; 122
    2650:	53 e4       	ldi	r21, 0x43	; 67
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	f8 01       	movw	r30, r16
    265c:	80 83       	st	Z, r24
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	a2 83       	std	Z+2, r26	; 0x02
    2662:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2664:	fe 01       	movw	r30, r28
    2666:	e3 5b       	subi	r30, 0xB3	; 179
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	60 81       	ld	r22, Z
    266c:	71 81       	ldd	r23, Z+1	; 0x01
    266e:	82 81       	ldd	r24, Z+2	; 0x02
    2670:	93 81       	ldd	r25, Z+3	; 0x03
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267e:	88 23       	and	r24, r24
    2680:	44 f4       	brge	.+16     	; 0x2692 <LCD_displayCharacter+0x224>
		__ticks = 1;
    2682:	fe 01       	movw	r30, r28
    2684:	e5 5b       	subi	r30, 0xB5	; 181
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	80 83       	st	Z, r24
    2690:	64 c0       	rjmp	.+200    	; 0x275a <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2692:	fe 01       	movw	r30, r28
    2694:	e3 5b       	subi	r30, 0xB3	; 179
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	60 81       	ld	r22, Z
    269a:	71 81       	ldd	r23, Z+1	; 0x01
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	3f ef       	ldi	r19, 0xFF	; 255
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	57 e4       	ldi	r21, 0x47	; 71
    26a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	0c f0       	brlt	.+2      	; 0x26b2 <LCD_displayCharacter+0x244>
    26b0:	43 c0       	rjmp	.+134    	; 0x2738 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b2:	fe 01       	movw	r30, r28
    26b4:	ef 5a       	subi	r30, 0xAF	; 175
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8e 01       	movw	r16, r28
    26d2:	05 5b       	subi	r16, 0xB5	; 181
    26d4:	1f 4f       	sbci	r17, 0xFF	; 255
    26d6:	bc 01       	movw	r22, r24
    26d8:	cd 01       	movw	r24, r26
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	f8 01       	movw	r30, r16
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
    26e8:	1f c0       	rjmp	.+62     	; 0x2728 <LCD_displayCharacter+0x2ba>
    26ea:	fe 01       	movw	r30, r28
    26ec:	e7 5b       	subi	r30, 0xB7	; 183
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	89 e1       	ldi	r24, 0x19	; 25
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
    26f8:	fe 01       	movw	r30, r28
    26fa:	e7 5b       	subi	r30, 0xB7	; 183
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <LCD_displayCharacter+0x294>
    2706:	fe 01       	movw	r30, r28
    2708:	e7 5b       	subi	r30, 0xB7	; 183
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2710:	de 01       	movw	r26, r28
    2712:	a5 5b       	subi	r26, 0xB5	; 181
    2714:	bf 4f       	sbci	r27, 0xFF	; 255
    2716:	fe 01       	movw	r30, r28
    2718:	e5 5b       	subi	r30, 0xB5	; 181
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	11 96       	adiw	r26, 0x01	; 1
    2724:	9c 93       	st	X, r25
    2726:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2728:	fe 01       	movw	r30, r28
    272a:	e5 5b       	subi	r30, 0xB5	; 181
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	d1 f6       	brne	.-76     	; 0x26ea <LCD_displayCharacter+0x27c>
    2736:	27 c0       	rjmp	.+78     	; 0x2786 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2738:	8e 01       	movw	r16, r28
    273a:	05 5b       	subi	r16, 0xB5	; 181
    273c:	1f 4f       	sbci	r17, 0xFF	; 255
    273e:	fe 01       	movw	r30, r28
    2740:	e3 5b       	subi	r30, 0xB3	; 179
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	60 81       	ld	r22, Z
    2746:	71 81       	ldd	r23, Z+1	; 0x01
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	f8 01       	movw	r30, r16
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
    275a:	de 01       	movw	r26, r28
    275c:	a9 5b       	subi	r26, 0xB9	; 185
    275e:	bf 4f       	sbci	r27, 0xFF	; 255
    2760:	fe 01       	movw	r30, r28
    2762:	e5 5b       	subi	r30, 0xB5	; 181
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 81       	ld	r24, Z
    2768:	91 81       	ldd	r25, Z+1	; 0x01
    276a:	8d 93       	st	X+, r24
    276c:	9c 93       	st	X, r25
    276e:	fe 01       	movw	r30, r28
    2770:	e9 5b       	subi	r30, 0xB9	; 185
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 81       	ld	r24, Z
    2776:	91 81       	ldd	r25, Z+1	; 0x01
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <LCD_displayCharacter+0x30a>
    277c:	fe 01       	movw	r30, r28
    277e:	e9 5b       	subi	r30, 0xB9	; 185
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    2786:	a5 e3       	ldi	r26, 0x35	; 53
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e5 e3       	ldi	r30, 0x35	; 53
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	98 2f       	mov	r25, r24
    2792:	9f 70       	andi	r25, 0x0F	; 15
    2794:	fe 01       	movw	r30, r28
    2796:	ed 59       	subi	r30, 0x9D	; 157
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	80 7f       	andi	r24, 0xF0	; 240
    279e:	89 2b       	or	r24, r25
    27a0:	8c 93       	st	X, r24
    27a2:	fe 01       	movw	r30, r28
    27a4:	ed 5b       	subi	r30, 0xBD	; 189
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	a0 e8       	ldi	r26, 0x80	; 128
    27ae:	bf e3       	ldi	r27, 0x3F	; 63
    27b0:	80 83       	st	Z, r24
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	a2 83       	std	Z+2, r26	; 0x02
    27b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b8:	8e 01       	movw	r16, r28
    27ba:	01 5c       	subi	r16, 0xC1	; 193
    27bc:	1f 4f       	sbci	r17, 0xFF	; 255
    27be:	fe 01       	movw	r30, r28
    27c0:	ed 5b       	subi	r30, 0xBD	; 189
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	4a e7       	ldi	r20, 0x7A	; 122
    27d2:	53 e4       	ldi	r21, 0x43	; 67
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	f8 01       	movw	r30, r16
    27de:	80 83       	st	Z, r24
    27e0:	91 83       	std	Z+1, r25	; 0x01
    27e2:	a2 83       	std	Z+2, r26	; 0x02
    27e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e6:	fe 01       	movw	r30, r28
    27e8:	ff 96       	adiw	r30, 0x3f	; 63
    27ea:	60 81       	ld	r22, Z
    27ec:	71 81       	ldd	r23, Z+1	; 0x01
    27ee:	82 81       	ldd	r24, Z+2	; 0x02
    27f0:	93 81       	ldd	r25, Z+3	; 0x03
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e8       	ldi	r20, 0x80	; 128
    27f8:	5f e3       	ldi	r21, 0x3F	; 63
    27fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27fe:	88 23       	and	r24, r24
    2800:	2c f4       	brge	.+10     	; 0x280c <LCD_displayCharacter+0x39e>
		__ticks = 1;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	9e af       	std	Y+62, r25	; 0x3e
    2808:	8d af       	std	Y+61, r24	; 0x3d
    280a:	46 c0       	rjmp	.+140    	; 0x2898 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    280c:	fe 01       	movw	r30, r28
    280e:	ff 96       	adiw	r30, 0x3f	; 63
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	3f ef       	ldi	r19, 0xFF	; 255
    281c:	4f e7       	ldi	r20, 0x7F	; 127
    281e:	57 e4       	ldi	r21, 0x47	; 71
    2820:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2824:	18 16       	cp	r1, r24
    2826:	64 f5       	brge	.+88     	; 0x2880 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2828:	fe 01       	movw	r30, r28
    282a:	ed 5b       	subi	r30, 0xBD	; 189
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	60 81       	ld	r22, Z
    2830:	71 81       	ldd	r23, Z+1	; 0x01
    2832:	82 81       	ldd	r24, Z+2	; 0x02
    2834:	93 81       	ldd	r25, Z+3	; 0x03
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e2       	ldi	r20, 0x20	; 32
    283c:	51 e4       	ldi	r21, 0x41	; 65
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9e af       	std	Y+62, r25	; 0x3e
    2854:	8d af       	std	Y+61, r24	; 0x3d
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <LCD_displayCharacter+0x408>
    2858:	89 e1       	ldi	r24, 0x19	; 25
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9c af       	std	Y+60, r25	; 0x3c
    285e:	8b af       	std	Y+59, r24	; 0x3b
    2860:	8b ad       	ldd	r24, Y+59	; 0x3b
    2862:	9c ad       	ldd	r25, Y+60	; 0x3c
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <LCD_displayCharacter+0x3f6>
    2868:	9c af       	std	Y+60, r25	; 0x3c
    286a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	8d ad       	ldd	r24, Y+61	; 0x3d
    286e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	9e af       	std	Y+62, r25	; 0x3e
    2874:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	8d ad       	ldd	r24, Y+61	; 0x3d
    2878:	9e ad       	ldd	r25, Y+62	; 0x3e
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	69 f7       	brne	.-38     	; 0x2858 <LCD_displayCharacter+0x3ea>
    287e:	16 c0       	rjmp	.+44     	; 0x28ac <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2880:	fe 01       	movw	r30, r28
    2882:	ff 96       	adiw	r30, 0x3f	; 63
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9e af       	std	Y+62, r25	; 0x3e
    2896:	8d af       	std	Y+61, r24	; 0x3d
    2898:	8d ad       	ldd	r24, Y+61	; 0x3d
    289a:	9e ad       	ldd	r25, Y+62	; 0x3e
    289c:	9a af       	std	Y+58, r25	; 0x3a
    289e:	89 af       	std	Y+57, r24	; 0x39
    28a0:	89 ad       	ldd	r24, Y+57	; 0x39
    28a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <LCD_displayCharacter+0x436>
    28a8:	9a af       	std	Y+58, r25	; 0x3a
    28aa:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    28ac:	a5 e3       	ldi	r26, 0x35	; 53
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e5 e3       	ldi	r30, 0x35	; 53
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	8b 7f       	andi	r24, 0xFB	; 251
    28b8:	8c 93       	st	X, r24
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	a0 e8       	ldi	r26, 0x80	; 128
    28c0:	bf e3       	ldi	r27, 0x3F	; 63
    28c2:	8d ab       	std	Y+53, r24	; 0x35
    28c4:	9e ab       	std	Y+54, r25	; 0x36
    28c6:	af ab       	std	Y+55, r26	; 0x37
    28c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ca:	6d a9       	ldd	r22, Y+53	; 0x35
    28cc:	7e a9       	ldd	r23, Y+54	; 0x36
    28ce:	8f a9       	ldd	r24, Y+55	; 0x37
    28d0:	98 ad       	ldd	r25, Y+56	; 0x38
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	4a e7       	ldi	r20, 0x7A	; 122
    28d8:	53 e4       	ldi	r21, 0x43	; 67
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	89 ab       	std	Y+49, r24	; 0x31
    28e4:	9a ab       	std	Y+50, r25	; 0x32
    28e6:	ab ab       	std	Y+51, r26	; 0x33
    28e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ea:	69 a9       	ldd	r22, Y+49	; 0x31
    28ec:	7a a9       	ldd	r23, Y+50	; 0x32
    28ee:	8b a9       	ldd	r24, Y+51	; 0x33
    28f0:	9c a9       	ldd	r25, Y+52	; 0x34
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e8       	ldi	r20, 0x80	; 128
    28f8:	5f e3       	ldi	r21, 0x3F	; 63
    28fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28fe:	88 23       	and	r24, r24
    2900:	2c f4       	brge	.+10     	; 0x290c <LCD_displayCharacter+0x49e>
		__ticks = 1;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	98 ab       	std	Y+48, r25	; 0x30
    2908:	8f a7       	std	Y+47, r24	; 0x2f
    290a:	3f c0       	rjmp	.+126    	; 0x298a <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    290c:	69 a9       	ldd	r22, Y+49	; 0x31
    290e:	7a a9       	ldd	r23, Y+50	; 0x32
    2910:	8b a9       	ldd	r24, Y+51	; 0x33
    2912:	9c a9       	ldd	r25, Y+52	; 0x34
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	3f ef       	ldi	r19, 0xFF	; 255
    2918:	4f e7       	ldi	r20, 0x7F	; 127
    291a:	57 e4       	ldi	r21, 0x47	; 71
    291c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2920:	18 16       	cp	r1, r24
    2922:	4c f5       	brge	.+82     	; 0x2976 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2924:	6d a9       	ldd	r22, Y+53	; 0x35
    2926:	7e a9       	ldd	r23, Y+54	; 0x36
    2928:	8f a9       	ldd	r24, Y+55	; 0x37
    292a:	98 ad       	ldd	r25, Y+56	; 0x38
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e2       	ldi	r20, 0x20	; 32
    2932:	51 e4       	ldi	r21, 0x41	; 65
    2934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	bc 01       	movw	r22, r24
    293e:	cd 01       	movw	r24, r26
    2940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	98 ab       	std	Y+48, r25	; 0x30
    294a:	8f a7       	std	Y+47, r24	; 0x2f
    294c:	0f c0       	rjmp	.+30     	; 0x296c <LCD_displayCharacter+0x4fe>
    294e:	89 e1       	ldi	r24, 0x19	; 25
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	9e a7       	std	Y+46, r25	; 0x2e
    2954:	8d a7       	std	Y+45, r24	; 0x2d
    2956:	8d a5       	ldd	r24, Y+45	; 0x2d
    2958:	9e a5       	ldd	r25, Y+46	; 0x2e
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <LCD_displayCharacter+0x4ec>
    295e:	9e a7       	std	Y+46, r25	; 0x2e
    2960:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2962:	8f a5       	ldd	r24, Y+47	; 0x2f
    2964:	98 a9       	ldd	r25, Y+48	; 0x30
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	98 ab       	std	Y+48, r25	; 0x30
    296a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296c:	8f a5       	ldd	r24, Y+47	; 0x2f
    296e:	98 a9       	ldd	r25, Y+48	; 0x30
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	69 f7       	brne	.-38     	; 0x294e <LCD_displayCharacter+0x4e0>
    2974:	14 c0       	rjmp	.+40     	; 0x299e <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2976:	69 a9       	ldd	r22, Y+49	; 0x31
    2978:	7a a9       	ldd	r23, Y+50	; 0x32
    297a:	8b a9       	ldd	r24, Y+51	; 0x33
    297c:	9c a9       	ldd	r25, Y+52	; 0x34
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	98 ab       	std	Y+48, r25	; 0x30
    2988:	8f a7       	std	Y+47, r24	; 0x2f
    298a:	8f a5       	ldd	r24, Y+47	; 0x2f
    298c:	98 a9       	ldd	r25, Y+48	; 0x30
    298e:	9c a7       	std	Y+44, r25	; 0x2c
    2990:	8b a7       	std	Y+43, r24	; 0x2b
    2992:	8b a5       	ldd	r24, Y+43	; 0x2b
    2994:	9c a5       	ldd	r25, Y+44	; 0x2c
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <LCD_displayCharacter+0x528>
    299a:	9c a7       	std	Y+44, r25	; 0x2c
    299c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    299e:	a5 e3       	ldi	r26, 0x35	; 53
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e5 e3       	ldi	r30, 0x35	; 53
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	84 60       	ori	r24, 0x04	; 4
    29aa:	8c 93       	st	X, r24
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	a0 e8       	ldi	r26, 0x80	; 128
    29b2:	bf e3       	ldi	r27, 0x3F	; 63
    29b4:	8f a3       	std	Y+39, r24	; 0x27
    29b6:	98 a7       	std	Y+40, r25	; 0x28
    29b8:	a9 a7       	std	Y+41, r26	; 0x29
    29ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29bc:	6f a1       	ldd	r22, Y+39	; 0x27
    29be:	78 a5       	ldd	r23, Y+40	; 0x28
    29c0:	89 a5       	ldd	r24, Y+41	; 0x29
    29c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4a e7       	ldi	r20, 0x7A	; 122
    29ca:	53 e4       	ldi	r21, 0x43	; 67
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	8b a3       	std	Y+35, r24	; 0x23
    29d6:	9c a3       	std	Y+36, r25	; 0x24
    29d8:	ad a3       	std	Y+37, r26	; 0x25
    29da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29dc:	6b a1       	ldd	r22, Y+35	; 0x23
    29de:	7c a1       	ldd	r23, Y+36	; 0x24
    29e0:	8d a1       	ldd	r24, Y+37	; 0x25
    29e2:	9e a1       	ldd	r25, Y+38	; 0x26
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e8       	ldi	r20, 0x80	; 128
    29ea:	5f e3       	ldi	r21, 0x3F	; 63
    29ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f0:	88 23       	and	r24, r24
    29f2:	2c f4       	brge	.+10     	; 0x29fe <LCD_displayCharacter+0x590>
		__ticks = 1;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9a a3       	std	Y+34, r25	; 0x22
    29fa:	89 a3       	std	Y+33, r24	; 0x21
    29fc:	3f c0       	rjmp	.+126    	; 0x2a7c <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    29fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2a00:	7c a1       	ldd	r23, Y+36	; 0x24
    2a02:	8d a1       	ldd	r24, Y+37	; 0x25
    2a04:	9e a1       	ldd	r25, Y+38	; 0x26
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	3f ef       	ldi	r19, 0xFF	; 255
    2a0a:	4f e7       	ldi	r20, 0x7F	; 127
    2a0c:	57 e4       	ldi	r21, 0x47	; 71
    2a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a12:	18 16       	cp	r1, r24
    2a14:	4c f5       	brge	.+82     	; 0x2a68 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a16:	6f a1       	ldd	r22, Y+39	; 0x27
    2a18:	78 a5       	ldd	r23, Y+40	; 0x28
    2a1a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e2       	ldi	r20, 0x20	; 32
    2a24:	51 e4       	ldi	r21, 0x41	; 65
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9a a3       	std	Y+34, r25	; 0x22
    2a3c:	89 a3       	std	Y+33, r24	; 0x21
    2a3e:	0f c0       	rjmp	.+30     	; 0x2a5e <LCD_displayCharacter+0x5f0>
    2a40:	89 e1       	ldi	r24, 0x19	; 25
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	98 a3       	std	Y+32, r25	; 0x20
    2a46:	8f 8f       	std	Y+31, r24	; 0x1f
    2a48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a4a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <LCD_displayCharacter+0x5de>
    2a50:	98 a3       	std	Y+32, r25	; 0x20
    2a52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a54:	89 a1       	ldd	r24, Y+33	; 0x21
    2a56:	9a a1       	ldd	r25, Y+34	; 0x22
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	9a a3       	std	Y+34, r25	; 0x22
    2a5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a60:	9a a1       	ldd	r25, Y+34	; 0x22
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	69 f7       	brne	.-38     	; 0x2a40 <LCD_displayCharacter+0x5d2>
    2a66:	14 c0       	rjmp	.+40     	; 0x2a90 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a68:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	9a a3       	std	Y+34, r25	; 0x22
    2a7a:	89 a3       	std	Y+33, r24	; 0x21
    2a7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a80:	9e 8f       	std	Y+30, r25	; 0x1e
    2a82:	8d 8f       	std	Y+29, r24	; 0x1d
    2a84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <LCD_displayCharacter+0x61a>
    2a8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a8e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    2a90:	a5 e3       	ldi	r26, 0x35	; 53
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e5 e3       	ldi	r30, 0x35	; 53
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	2f 70       	andi	r18, 0x0F	; 15
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ed 59       	subi	r30, 0x9D	; 157
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	82 95       	swap	r24
    2aac:	92 95       	swap	r25
    2aae:	90 7f       	andi	r25, 0xF0	; 240
    2ab0:	98 27       	eor	r25, r24
    2ab2:	80 7f       	andi	r24, 0xF0	; 240
    2ab4:	98 27       	eor	r25, r24
    2ab6:	82 2b       	or	r24, r18
    2ab8:	8c 93       	st	X, r24
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a0 e8       	ldi	r26, 0x80	; 128
    2ac0:	bf e3       	ldi	r27, 0x3F	; 63
    2ac2:	89 8f       	std	Y+25, r24	; 0x19
    2ac4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ac6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ac8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aca:	69 8d       	ldd	r22, Y+25	; 0x19
    2acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	4a e7       	ldi	r20, 0x7A	; 122
    2ad8:	53 e4       	ldi	r21, 0x43	; 67
    2ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8d 8b       	std	Y+21, r24	; 0x15
    2ae4:	9e 8b       	std	Y+22, r25	; 0x16
    2ae6:	af 8b       	std	Y+23, r26	; 0x17
    2ae8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aea:	6d 89       	ldd	r22, Y+21	; 0x15
    2aec:	7e 89       	ldd	r23, Y+22	; 0x16
    2aee:	8f 89       	ldd	r24, Y+23	; 0x17
    2af0:	98 8d       	ldd	r25, Y+24	; 0x18
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	5f e3       	ldi	r21, 0x3F	; 63
    2afa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2afe:	88 23       	and	r24, r24
    2b00:	2c f4       	brge	.+10     	; 0x2b0c <LCD_displayCharacter+0x69e>
		__ticks = 1;
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9c 8b       	std	Y+20, r25	; 0x14
    2b08:	8b 8b       	std	Y+19, r24	; 0x13
    2b0a:	3f c0       	rjmp	.+126    	; 0x2b8a <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b10:	8f 89       	ldd	r24, Y+23	; 0x17
    2b12:	98 8d       	ldd	r25, Y+24	; 0x18
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	3f ef       	ldi	r19, 0xFF	; 255
    2b18:	4f e7       	ldi	r20, 0x7F	; 127
    2b1a:	57 e4       	ldi	r21, 0x47	; 71
    2b1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b20:	18 16       	cp	r1, r24
    2b22:	4c f5       	brge	.+82     	; 0x2b76 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b24:	69 8d       	ldd	r22, Y+25	; 0x19
    2b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e2       	ldi	r20, 0x20	; 32
    2b32:	51 e4       	ldi	r21, 0x41	; 65
    2b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	9c 8b       	std	Y+20, r25	; 0x14
    2b4a:	8b 8b       	std	Y+19, r24	; 0x13
    2b4c:	0f c0       	rjmp	.+30     	; 0x2b6c <LCD_displayCharacter+0x6fe>
    2b4e:	89 e1       	ldi	r24, 0x19	; 25
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9a 8b       	std	Y+18, r25	; 0x12
    2b54:	89 8b       	std	Y+17, r24	; 0x11
    2b56:	89 89       	ldd	r24, Y+17	; 0x11
    2b58:	9a 89       	ldd	r25, Y+18	; 0x12
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <LCD_displayCharacter+0x6ec>
    2b5e:	9a 8b       	std	Y+18, r25	; 0x12
    2b60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b62:	8b 89       	ldd	r24, Y+19	; 0x13
    2b64:	9c 89       	ldd	r25, Y+20	; 0x14
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	9c 8b       	std	Y+20, r25	; 0x14
    2b6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	69 f7       	brne	.-38     	; 0x2b4e <LCD_displayCharacter+0x6e0>
    2b74:	14 c0       	rjmp	.+40     	; 0x2b9e <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b76:	6d 89       	ldd	r22, Y+21	; 0x15
    2b78:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	9c 8b       	std	Y+20, r25	; 0x14
    2b88:	8b 8b       	std	Y+19, r24	; 0x13
    2b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8e:	98 8b       	std	Y+16, r25	; 0x10
    2b90:	8f 87       	std	Y+15, r24	; 0x0f
    2b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b94:	98 89       	ldd	r25, Y+16	; 0x10
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <LCD_displayCharacter+0x728>
    2b9a:	98 8b       	std	Y+16, r25	; 0x10
    2b9c:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2b9e:	a5 e3       	ldi	r26, 0x35	; 53
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e5 e3       	ldi	r30, 0x35	; 53
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8b 7f       	andi	r24, 0xFB	; 251
    2baa:	8c 93       	st	X, r24
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a0 e8       	ldi	r26, 0x80	; 128
    2bb2:	bf e3       	ldi	r27, 0x3F	; 63
    2bb4:	8b 87       	std	Y+11, r24	; 0x0b
    2bb6:	9c 87       	std	Y+12, r25	; 0x0c
    2bb8:	ad 87       	std	Y+13, r26	; 0x0d
    2bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a e7       	ldi	r20, 0x7A	; 122
    2bca:	53 e4       	ldi	r21, 0x43	; 67
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	8f 83       	std	Y+7, r24	; 0x07
    2bd6:	98 87       	std	Y+8, r25	; 0x08
    2bd8:	a9 87       	std	Y+9, r26	; 0x09
    2bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	2c f4       	brge	.+10     	; 0x2bfe <LCD_displayCharacter+0x790>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9e 83       	std	Y+6, r25	; 0x06
    2bfa:	8d 83       	std	Y+5, r24	; 0x05
    2bfc:	3f c0       	rjmp	.+126    	; 0x2c7c <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	3f ef       	ldi	r19, 0xFF	; 255
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	57 e4       	ldi	r21, 0x47	; 71
    2c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	4c f5       	brge	.+82     	; 0x2c68 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <LCD_displayCharacter+0x7f0>
    2c40:	89 e1       	ldi	r24, 0x19	; 25
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <LCD_displayCharacter+0x7de>
    2c50:	9c 83       	std	Y+4, r25	; 0x04
    2c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	9e 81       	ldd	r25, Y+6	; 0x06
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	9e 83       	std	Y+6, r25	; 0x06
    2c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	69 f7       	brne	.-38     	; 0x2c40 <LCD_displayCharacter+0x7d2>
    2c66:	14 c0       	rjmp	.+40     	; 0x2c90 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6a:	78 85       	ldd	r23, Y+8	; 0x08
    2c6c:	89 85       	ldd	r24, Y+9	; 0x09
    2c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <LCD_displayCharacter+0x81a>
    2c8c:	9a 83       	std	Y+2, r25	; 0x02
    2c8e:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c90:	cd 59       	subi	r28, 0x9D	; 157
    2c92:	df 4f       	sbci	r29, 0xFF	; 255
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	f8 94       	cli
    2c98:	de bf       	out	0x3e, r29	; 62
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	cd bf       	out	0x3d, r28	; 61
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	08 95       	ret

00002ca8 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2ca8:	df 93       	push	r29
    2caa:	cf 93       	push	r28
    2cac:	00 d0       	rcall	.+0      	; 0x2cae <LCD_displayString+0x6>
    2cae:	0f 92       	push	r0
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	9b 83       	std	Y+3, r25	; 0x03
    2cb6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cb8:	19 82       	std	Y+1, r1	; 0x01
    2cba:	0e c0       	rjmp	.+28     	; 0x2cd8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	e2 0f       	add	r30, r18
    2cca:	f3 1f       	adc	r31, r19
    2ccc:	80 81       	ld	r24, Z
    2cce:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_displayCharacter>
		i++;
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	8f 5f       	subi	r24, 0xFF	; 255
    2cd6:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	28 2f       	mov	r18, r24
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e2 0f       	add	r30, r18
    2ce6:	f3 1f       	adc	r31, r19
    2ce8:	80 81       	ld	r24, Z
    2cea:	88 23       	and	r24, r24
    2cec:	39 f7       	brne	.-50     	; 0x2cbc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <LCD_goToRowColumn+0x6>
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <LCD_goToRowColumn+0x8>
    2d02:	0f 92       	push	r0
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	8a 83       	std	Y+2, r24	; 0x02
    2d0a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	3d 83       	std	Y+5, r19	; 0x05
    2d14:	2c 83       	std	Y+4, r18	; 0x04
    2d16:	8c 81       	ldd	r24, Y+4	; 0x04
    2d18:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1a:	81 30       	cpi	r24, 0x01	; 1
    2d1c:	91 05       	cpc	r25, r1
    2d1e:	c1 f0       	breq	.+48     	; 0x2d50 <LCD_goToRowColumn+0x56>
    2d20:	2c 81       	ldd	r18, Y+4	; 0x04
    2d22:	3d 81       	ldd	r19, Y+5	; 0x05
    2d24:	22 30       	cpi	r18, 0x02	; 2
    2d26:	31 05       	cpc	r19, r1
    2d28:	2c f4       	brge	.+10     	; 0x2d34 <LCD_goToRowColumn+0x3a>
    2d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	61 f0       	breq	.+24     	; 0x2d4a <LCD_goToRowColumn+0x50>
    2d32:	19 c0       	rjmp	.+50     	; 0x2d66 <LCD_goToRowColumn+0x6c>
    2d34:	2c 81       	ldd	r18, Y+4	; 0x04
    2d36:	3d 81       	ldd	r19, Y+5	; 0x05
    2d38:	22 30       	cpi	r18, 0x02	; 2
    2d3a:	31 05       	cpc	r19, r1
    2d3c:	69 f0       	breq	.+26     	; 0x2d58 <LCD_goToRowColumn+0x5e>
    2d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d40:	9d 81       	ldd	r25, Y+5	; 0x05
    2d42:	83 30       	cpi	r24, 0x03	; 3
    2d44:	91 05       	cpc	r25, r1
    2d46:	61 f0       	breq	.+24     	; 0x2d60 <LCD_goToRowColumn+0x66>
    2d48:	0e c0       	rjmp	.+28     	; 0x2d66 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	0b c0       	rjmp	.+22     	; 0x2d66 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	80 5c       	subi	r24, 0xC0	; 192
    2d54:	89 83       	std	Y+1, r24	; 0x01
    2d56:	07 c0       	rjmp	.+14     	; 0x2d66 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	80 5f       	subi	r24, 0xF0	; 240
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	03 c0       	rjmp	.+6      	; 0x2d66 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	80 5b       	subi	r24, 0xB0	; 176
    2d64:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	80 68       	ori	r24, 0x80	; 128
    2d6a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_sendCommand>
}
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <LCD_displayStringRowColumn+0x6>
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <LCD_displayStringRowColumn+0x8>
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	6a 83       	std	Y+2, r22	; 0x02
    2d8e:	5c 83       	std	Y+4, r21	; 0x04
    2d90:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	6a 81       	ldd	r22, Y+2	; 0x02
    2d96:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <LCD_displayString>
}
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	62 97       	sbiw	r28, 0x12	; 18
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	9a 8b       	std	Y+18, r25	; 0x12
    2dc6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2dc8:	89 89       	ldd	r24, Y+17	; 0x11
    2dca:	9a 89       	ldd	r25, Y+18	; 0x12
    2dcc:	9e 01       	movw	r18, r28
    2dce:	2f 5f       	subi	r18, 0xFF	; 255
    2dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd2:	b9 01       	movw	r22, r18
    2dd4:	4a e0       	ldi	r20, 0x0A	; 10
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <itoa>
   LCD_displayString(buff);
    2ddc:	ce 01       	movw	r24, r28
    2dde:	01 96       	adiw	r24, 0x01	; 1
    2de0:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <LCD_displayString>
}
    2de4:	62 96       	adiw	r28, 0x12	; 18
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	08 95       	ret

00002df6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_sendCommand>
}
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <main>:

void EdgeDetector(void);


int main(void)
{
    2e0a:	ef 92       	push	r14
    2e0c:	ff 92       	push	r15
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	69 97       	sbiw	r28, 0x19	; 25
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
	uint32 dutyCycle = 0;
    2e26:	19 82       	std	Y+1, r1	; 0x01
    2e28:	1a 82       	std	Y+2, r1	; 0x02
    2e2a:	1b 82       	std	Y+3, r1	; 0x03
    2e2c:	1c 82       	std	Y+4, r1	; 0x04
	SREG |= (1<<7);
    2e2e:	af e5       	ldi	r26, 0x5F	; 95
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	ef e5       	ldi	r30, 0x5F	; 95
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	80 68       	ori	r24, 0x80	; 128
    2e3a:	8c 93       	st	X, r24

	LCD_init();
    2e3c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <LCD_init>

	External_Interrupt_Configuration edge= {INT_0, Raising,DISABLE};
    2e40:	ae 01       	movw	r20, r28
    2e42:	4b 5f       	subi	r20, 0xFB	; 251
    2e44:	5f 4f       	sbci	r21, 0xFF	; 255
    2e46:	59 8b       	std	Y+17, r21	; 0x11
    2e48:	48 8b       	std	Y+16, r20	; 0x10
    2e4a:	8d e7       	ldi	r24, 0x7D	; 125
    2e4c:	91 e0       	ldi	r25, 0x01	; 1
    2e4e:	9b 8b       	std	Y+19, r25	; 0x13
    2e50:	8a 8b       	std	Y+18, r24	; 0x12
    2e52:	93 e0       	ldi	r25, 0x03	; 3
    2e54:	9c 8b       	std	Y+20, r25	; 0x14
    2e56:	ea 89       	ldd	r30, Y+18	; 0x12
    2e58:	fb 89       	ldd	r31, Y+19	; 0x13
    2e5a:	00 80       	ld	r0, Z
    2e5c:	4a 89       	ldd	r20, Y+18	; 0x12
    2e5e:	5b 89       	ldd	r21, Y+19	; 0x13
    2e60:	4f 5f       	subi	r20, 0xFF	; 255
    2e62:	5f 4f       	sbci	r21, 0xFF	; 255
    2e64:	5b 8b       	std	Y+19, r21	; 0x13
    2e66:	4a 8b       	std	Y+18, r20	; 0x12
    2e68:	e8 89       	ldd	r30, Y+16	; 0x10
    2e6a:	f9 89       	ldd	r31, Y+17	; 0x11
    2e6c:	00 82       	st	Z, r0
    2e6e:	48 89       	ldd	r20, Y+16	; 0x10
    2e70:	59 89       	ldd	r21, Y+17	; 0x11
    2e72:	4f 5f       	subi	r20, 0xFF	; 255
    2e74:	5f 4f       	sbci	r21, 0xFF	; 255
    2e76:	59 8b       	std	Y+17, r21	; 0x11
    2e78:	48 8b       	std	Y+16, r20	; 0x10
    2e7a:	5c 89       	ldd	r21, Y+20	; 0x14
    2e7c:	51 50       	subi	r21, 0x01	; 1
    2e7e:	5c 8b       	std	Y+20, r21	; 0x14
    2e80:	8c 89       	ldd	r24, Y+20	; 0x14
    2e82:	88 23       	and	r24, r24
    2e84:	41 f7       	brne	.-48     	; 0x2e56 <main+0x4c>


	Timer_Configuration timer= {0,0, Timer_1, F_CPU_CLOCK, Overflow, 0};
    2e86:	fe 01       	movw	r30, r28
    2e88:	38 96       	adiw	r30, 0x08	; 8
    2e8a:	fe 8b       	std	Y+22, r31	; 0x16
    2e8c:	ed 8b       	std	Y+21, r30	; 0x15
    2e8e:	45 e7       	ldi	r20, 0x75	; 117
    2e90:	51 e0       	ldi	r21, 0x01	; 1
    2e92:	58 8f       	std	Y+24, r21	; 0x18
    2e94:	4f 8b       	std	Y+23, r20	; 0x17
    2e96:	58 e0       	ldi	r21, 0x08	; 8
    2e98:	59 8f       	std	Y+25, r21	; 0x19
    2e9a:	ef 89       	ldd	r30, Y+23	; 0x17
    2e9c:	f8 8d       	ldd	r31, Y+24	; 0x18
    2e9e:	00 80       	ld	r0, Z
    2ea0:	4f 89       	ldd	r20, Y+23	; 0x17
    2ea2:	58 8d       	ldd	r21, Y+24	; 0x18
    2ea4:	4f 5f       	subi	r20, 0xFF	; 255
    2ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ea8:	58 8f       	std	Y+24, r21	; 0x18
    2eaa:	4f 8b       	std	Y+23, r20	; 0x17
    2eac:	ed 89       	ldd	r30, Y+21	; 0x15
    2eae:	fe 89       	ldd	r31, Y+22	; 0x16
    2eb0:	00 82       	st	Z, r0
    2eb2:	4d 89       	ldd	r20, Y+21	; 0x15
    2eb4:	5e 89       	ldd	r21, Y+22	; 0x16
    2eb6:	4f 5f       	subi	r20, 0xFF	; 255
    2eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eba:	5e 8b       	std	Y+22, r21	; 0x16
    2ebc:	4d 8b       	std	Y+21, r20	; 0x15
    2ebe:	59 8d       	ldd	r21, Y+25	; 0x19
    2ec0:	51 50       	subi	r21, 0x01	; 1
    2ec2:	59 8f       	std	Y+25, r21	; 0x19
    2ec4:	89 8d       	ldd	r24, Y+25	; 0x19
    2ec6:	88 23       	and	r24, r24
    2ec8:	41 f7       	brne	.-48     	; 0x2e9a <main+0x90>
	TimerInit(&timer);
    2eca:	ce 01       	movw	r24, r28
    2ecc:	08 96       	adiw	r24, 0x08	; 8
    2ece:	0e 94 a8 08 	call	0x1150	; 0x1150 <TimerInit>


	External_Interrupt_Set_CallBack(INT_0, EdgeDetector);
    2ed2:	2f ec       	ldi	r18, 0xCF	; 207
    2ed4:	37 e1       	ldi	r19, 0x17	; 23
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	b9 01       	movw	r22, r18
    2eda:	0e 94 94 0c 	call	0x1928	; 0x1928 <External_Interrupt_Set_CallBack>
	External_Interrupt_Init(&edge);
    2ede:	ce 01       	movw	r24, r28
    2ee0:	05 96       	adiw	r24, 0x05	; 5
    2ee2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <External_Interrupt_Init>


	while(1)
	{

		if(edge_Counter == 4)
    2ee6:	80 91 98 01 	lds	r24, 0x0198
    2eea:	84 30       	cpi	r24, 0x04	; 4
    2eec:	e1 f7       	brne	.-8      	; 0x2ee6 <main+0xdc>
		{
			TimerDeInit(Timer_1);
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TimerDeInit>
			External_Interrupt_Deinit(INT_0);
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <External_Interrupt_Deinit>

			edge_Counter = 0;
    2efa:	10 92 98 01 	sts	0x0198, r1
			LCD_displayString("Duty Cycle= ");
    2efe:	80 e6       	ldi	r24, 0x60	; 96
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <LCD_displayString>
			/* calculate the dutyCycle */
			dutyCycle = ((float)(total_time-Period_time) / (total_time - High_time)) * 100;
    2f06:	20 91 9d 01 	lds	r18, 0x019D
    2f0a:	30 91 9e 01 	lds	r19, 0x019E
    2f0e:	80 91 9b 01 	lds	r24, 0x019B
    2f12:	90 91 9c 01 	lds	r25, 0x019C
    2f16:	f9 01       	movw	r30, r18
    2f18:	e8 1b       	sub	r30, r24
    2f1a:	f9 0b       	sbc	r31, r25
    2f1c:	cf 01       	movw	r24, r30
    2f1e:	cc 01       	movw	r24, r24
    2f20:	a0 e0       	ldi	r26, 0x00	; 0
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	bc 01       	movw	r22, r24
    2f26:	cd 01       	movw	r24, r26
    2f28:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f2c:	7b 01       	movw	r14, r22
    2f2e:	8c 01       	movw	r16, r24
    2f30:	20 91 9d 01 	lds	r18, 0x019D
    2f34:	30 91 9e 01 	lds	r19, 0x019E
    2f38:	80 91 99 01 	lds	r24, 0x0199
    2f3c:	90 91 9a 01 	lds	r25, 0x019A
    2f40:	a9 01       	movw	r20, r18
    2f42:	48 1b       	sub	r20, r24
    2f44:	59 0b       	sbc	r21, r25
    2f46:	ca 01       	movw	r24, r20
    2f48:	cc 01       	movw	r24, r24
    2f4a:	a0 e0       	ldi	r26, 0x00	; 0
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f56:	9b 01       	movw	r18, r22
    2f58:	ac 01       	movw	r20, r24
    2f5a:	c8 01       	movw	r24, r16
    2f5c:	b7 01       	movw	r22, r14
    2f5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	48 ec       	ldi	r20, 0xC8	; 200
    2f70:	52 e4       	ldi	r21, 0x42	; 66
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	bc 01       	movw	r22, r24
    2f7c:	cd 01       	movw	r24, r26
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	9a 83       	std	Y+2, r25	; 0x02
    2f8a:	ab 83       	std	Y+3, r26	; 0x03
    2f8c:	bc 83       	std	Y+4, r27	; 0x04
			LCD_intgerToString(dutyCycle);
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_intgerToString>
			LCD_displayCharacter('%');
    2f96:	85 e2       	ldi	r24, 0x25	; 37
    2f98:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_displayCharacter>
    2f9c:	a4 cf       	rjmp	.-184    	; 0x2ee6 <main+0xdc>

00002f9e <EdgeDetector>:




void EdgeDetector()
{
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	a0 97       	sbiw	r28, 0x20	; 32
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
	edge_Counter++;
    2fb2:	80 91 98 01 	lds	r24, 0x0198
    2fb6:	8f 5f       	subi	r24, 0xFF	; 255
    2fb8:	80 93 98 01 	sts	0x0198, r24


	if(edge_Counter == FIRST_EDGE)
    2fbc:	80 91 98 01 	lds	r24, 0x0198
    2fc0:	81 30       	cpi	r24, 0x01	; 1
    2fc2:	79 f5       	brne	.+94     	; 0x3022 <EdgeDetector+0x84>
	{


		External_Interrupt_Configuration edge= {INT_0,Falling,DISABLE};
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	01 96       	adiw	r24, 0x01	; 1
    2fc8:	9e 87       	std	Y+14, r25	; 0x0e
    2fca:	8d 87       	std	Y+13, r24	; 0x0d
    2fcc:	e9 e8       	ldi	r30, 0x89	; 137
    2fce:	f1 e0       	ldi	r31, 0x01	; 1
    2fd0:	f8 8b       	std	Y+16, r31	; 0x10
    2fd2:	ef 87       	std	Y+15, r30	; 0x0f
    2fd4:	f3 e0       	ldi	r31, 0x03	; 3
    2fd6:	f9 8b       	std	Y+17, r31	; 0x11
    2fd8:	ef 85       	ldd	r30, Y+15	; 0x0f
    2fda:	f8 89       	ldd	r31, Y+16	; 0x10
    2fdc:	00 80       	ld	r0, Z
    2fde:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe0:	98 89       	ldd	r25, Y+16	; 0x10
    2fe2:	01 96       	adiw	r24, 0x01	; 1
    2fe4:	98 8b       	std	Y+16, r25	; 0x10
    2fe6:	8f 87       	std	Y+15, r24	; 0x0f
    2fe8:	ed 85       	ldd	r30, Y+13	; 0x0d
    2fea:	fe 85       	ldd	r31, Y+14	; 0x0e
    2fec:	00 82       	st	Z, r0
    2fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff2:	01 96       	adiw	r24, 0x01	; 1
    2ff4:	9e 87       	std	Y+14, r25	; 0x0e
    2ff6:	8d 87       	std	Y+13, r24	; 0x0d
    2ff8:	99 89       	ldd	r25, Y+17	; 0x11
    2ffa:	91 50       	subi	r25, 0x01	; 1
    2ffc:	99 8b       	std	Y+17, r25	; 0x11
    2ffe:	e9 89       	ldd	r30, Y+17	; 0x11
    3000:	ee 23       	and	r30, r30
    3002:	51 f7       	brne	.-44     	; 0x2fd8 <EdgeDetector+0x3a>
		External_Interrupt_Set_CallBack(INT_0,EdgeDetector );
    3004:	2f ec       	ldi	r18, 0xCF	; 207
    3006:	37 e1       	ldi	r19, 0x17	; 23
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	b9 01       	movw	r22, r18
    300c:	0e 94 94 0c 	call	0x1928	; 0x1928 <External_Interrupt_Set_CallBack>
		External_Interrupt_Init(&edge);
    3010:	ce 01       	movw	r24, r28
    3012:	01 96       	adiw	r24, 0x01	; 1
    3014:	0e 94 c0 0c 	call	0x1980	; 0x1980 <External_Interrupt_Init>
        TCNT1=0;
    3018:	ec e4       	ldi	r30, 0x4C	; 76
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	11 82       	std	Z+1, r1	; 0x01
    301e:	10 82       	st	Z, r1
    3020:	a8 c0       	rjmp	.+336    	; 0x3172 <EdgeDetector+0x1d4>
	}

	else if(edge_Counter == SECOND_EDGE)
    3022:	80 91 98 01 	lds	r24, 0x0198
    3026:	82 30       	cpi	r24, 0x02	; 2
    3028:	99 f5       	brne	.+102    	; 0x3090 <EdgeDetector+0xf2>
	{


		External_Interrupt_Configuration edge= {INT_0,Raising,DISABLE};
    302a:	ce 01       	movw	r24, r28
    302c:	04 96       	adiw	r24, 0x04	; 4
    302e:	9b 8b       	std	Y+19, r25	; 0x13
    3030:	8a 8b       	std	Y+18, r24	; 0x12
    3032:	e6 e8       	ldi	r30, 0x86	; 134
    3034:	f1 e0       	ldi	r31, 0x01	; 1
    3036:	fd 8b       	std	Y+21, r31	; 0x15
    3038:	ec 8b       	std	Y+20, r30	; 0x14
    303a:	f3 e0       	ldi	r31, 0x03	; 3
    303c:	fe 8b       	std	Y+22, r31	; 0x16
    303e:	ec 89       	ldd	r30, Y+20	; 0x14
    3040:	fd 89       	ldd	r31, Y+21	; 0x15
    3042:	00 80       	ld	r0, Z
    3044:	8c 89       	ldd	r24, Y+20	; 0x14
    3046:	9d 89       	ldd	r25, Y+21	; 0x15
    3048:	01 96       	adiw	r24, 0x01	; 1
    304a:	9d 8b       	std	Y+21, r25	; 0x15
    304c:	8c 8b       	std	Y+20, r24	; 0x14
    304e:	ea 89       	ldd	r30, Y+18	; 0x12
    3050:	fb 89       	ldd	r31, Y+19	; 0x13
    3052:	00 82       	st	Z, r0
    3054:	8a 89       	ldd	r24, Y+18	; 0x12
    3056:	9b 89       	ldd	r25, Y+19	; 0x13
    3058:	01 96       	adiw	r24, 0x01	; 1
    305a:	9b 8b       	std	Y+19, r25	; 0x13
    305c:	8a 8b       	std	Y+18, r24	; 0x12
    305e:	9e 89       	ldd	r25, Y+22	; 0x16
    3060:	91 50       	subi	r25, 0x01	; 1
    3062:	9e 8b       	std	Y+22, r25	; 0x16
    3064:	ee 89       	ldd	r30, Y+22	; 0x16
    3066:	ee 23       	and	r30, r30
    3068:	51 f7       	brne	.-44     	; 0x303e <EdgeDetector+0xa0>
		External_Interrupt_Set_CallBack(INT_0,EdgeDetector );
    306a:	2f ec       	ldi	r18, 0xCF	; 207
    306c:	37 e1       	ldi	r19, 0x17	; 23
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	b9 01       	movw	r22, r18
    3072:	0e 94 94 0c 	call	0x1928	; 0x1928 <External_Interrupt_Set_CallBack>
		External_Interrupt_Init(&edge);
    3076:	ce 01       	movw	r24, r28
    3078:	04 96       	adiw	r24, 0x04	; 4
    307a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <External_Interrupt_Init>
        High_time=  TCNT1;
    307e:	ec e4       	ldi	r30, 0x4C	; 76
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	90 93 9a 01 	sts	0x019A, r25
    308a:	80 93 99 01 	sts	0x0199, r24
    308e:	71 c0       	rjmp	.+226    	; 0x3172 <EdgeDetector+0x1d4>

	}

	else if(edge_Counter == THIRD_EDGE)
    3090:	80 91 98 01 	lds	r24, 0x0198
    3094:	83 30       	cpi	r24, 0x03	; 3
    3096:	99 f5       	brne	.+102    	; 0x30fe <EdgeDetector+0x160>
	{


		External_Interrupt_Configuration edge= {INT_0,Falling,DISABLE};
    3098:	ce 01       	movw	r24, r28
    309a:	07 96       	adiw	r24, 0x07	; 7
    309c:	98 8f       	std	Y+24, r25	; 0x18
    309e:	8f 8b       	std	Y+23, r24	; 0x17
    30a0:	e3 e8       	ldi	r30, 0x83	; 131
    30a2:	f1 e0       	ldi	r31, 0x01	; 1
    30a4:	fa 8f       	std	Y+26, r31	; 0x1a
    30a6:	e9 8f       	std	Y+25, r30	; 0x19
    30a8:	f3 e0       	ldi	r31, 0x03	; 3
    30aa:	fb 8f       	std	Y+27, r31	; 0x1b
    30ac:	e9 8d       	ldd	r30, Y+25	; 0x19
    30ae:	fa 8d       	ldd	r31, Y+26	; 0x1a
    30b0:	00 80       	ld	r0, Z
    30b2:	89 8d       	ldd	r24, Y+25	; 0x19
    30b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30b6:	01 96       	adiw	r24, 0x01	; 1
    30b8:	9a 8f       	std	Y+26, r25	; 0x1a
    30ba:	89 8f       	std	Y+25, r24	; 0x19
    30bc:	ef 89       	ldd	r30, Y+23	; 0x17
    30be:	f8 8d       	ldd	r31, Y+24	; 0x18
    30c0:	00 82       	st	Z, r0
    30c2:	8f 89       	ldd	r24, Y+23	; 0x17
    30c4:	98 8d       	ldd	r25, Y+24	; 0x18
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	98 8f       	std	Y+24, r25	; 0x18
    30ca:	8f 8b       	std	Y+23, r24	; 0x17
    30cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30ce:	91 50       	subi	r25, 0x01	; 1
    30d0:	9b 8f       	std	Y+27, r25	; 0x1b
    30d2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    30d4:	ee 23       	and	r30, r30
    30d6:	51 f7       	brne	.-44     	; 0x30ac <EdgeDetector+0x10e>
		External_Interrupt_Set_CallBack(INT_0,EdgeDetector );
    30d8:	2f ec       	ldi	r18, 0xCF	; 207
    30da:	37 e1       	ldi	r19, 0x17	; 23
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	b9 01       	movw	r22, r18
    30e0:	0e 94 94 0c 	call	0x1928	; 0x1928 <External_Interrupt_Set_CallBack>
		External_Interrupt_Init(&edge);
    30e4:	ce 01       	movw	r24, r28
    30e6:	07 96       	adiw	r24, 0x07	; 7
    30e8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <External_Interrupt_Init>
        Period_time = TCNT1;
    30ec:	ec e4       	ldi	r30, 0x4C	; 76
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	91 81       	ldd	r25, Z+1	; 0x01
    30f4:	90 93 9c 01 	sts	0x019C, r25
    30f8:	80 93 9b 01 	sts	0x019B, r24
    30fc:	3a c0       	rjmp	.+116    	; 0x3172 <EdgeDetector+0x1d4>
	}


	else if(edge_Counter == FOURTH_EDGE)
    30fe:	80 91 98 01 	lds	r24, 0x0198
    3102:	84 30       	cpi	r24, 0x04	; 4
    3104:	b1 f5       	brne	.+108    	; 0x3172 <EdgeDetector+0x1d4>
	{

		External_Interrupt_Configuration edge= {INT_0,Raising,DISABLE};
    3106:	ce 01       	movw	r24, r28
    3108:	0a 96       	adiw	r24, 0x0a	; 10
    310a:	9d 8f       	std	Y+29, r25	; 0x1d
    310c:	8c 8f       	std	Y+28, r24	; 0x1c
    310e:	e0 e8       	ldi	r30, 0x80	; 128
    3110:	f1 e0       	ldi	r31, 0x01	; 1
    3112:	ff 8f       	std	Y+31, r31	; 0x1f
    3114:	ee 8f       	std	Y+30, r30	; 0x1e
    3116:	f3 e0       	ldi	r31, 0x03	; 3
    3118:	f8 a3       	std	Y+32, r31	; 0x20
    311a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    311c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    311e:	00 80       	ld	r0, Z
    3120:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3122:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	9f 8f       	std	Y+31, r25	; 0x1f
    3128:	8e 8f       	std	Y+30, r24	; 0x1e
    312a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    312c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    312e:	00 82       	st	Z, r0
    3130:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3132:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3134:	01 96       	adiw	r24, 0x01	; 1
    3136:	9d 8f       	std	Y+29, r25	; 0x1d
    3138:	8c 8f       	std	Y+28, r24	; 0x1c
    313a:	98 a1       	ldd	r25, Y+32	; 0x20
    313c:	91 50       	subi	r25, 0x01	; 1
    313e:	98 a3       	std	Y+32, r25	; 0x20
    3140:	e8 a1       	ldd	r30, Y+32	; 0x20
    3142:	ee 23       	and	r30, r30
    3144:	51 f7       	brne	.-44     	; 0x311a <EdgeDetector+0x17c>
		External_Interrupt_Set_CallBack(INT_0,EdgeDetector );
    3146:	2f ec       	ldi	r18, 0xCF	; 207
    3148:	37 e1       	ldi	r19, 0x17	; 23
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	b9 01       	movw	r22, r18
    314e:	0e 94 94 0c 	call	0x1928	; 0x1928 <External_Interrupt_Set_CallBack>
		External_Interrupt_Init(&edge);
    3152:	ce 01       	movw	r24, r28
    3154:	0a 96       	adiw	r24, 0x0a	; 10
    3156:	0e 94 c0 0c 	call	0x1980	; 0x1980 <External_Interrupt_Init>
        total_time = TCNT1;
    315a:	ec e4       	ldi	r30, 0x4C	; 76
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	90 93 9e 01 	sts	0x019E, r25
    3166:	80 93 9d 01 	sts	0x019D, r24
		TCNT1=0;
    316a:	ec e4       	ldi	r30, 0x4C	; 76
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	11 82       	std	Z+1, r1	; 0x01
    3170:	10 82       	st	Z, r1
	}


}
    3172:	a0 96       	adiw	r28, 0x20	; 32
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	cf 91       	pop	r28
    3180:	df 91       	pop	r29
    3182:	08 95       	ret

00003184 <__prologue_saves__>:
    3184:	2f 92       	push	r2
    3186:	3f 92       	push	r3
    3188:	4f 92       	push	r4
    318a:	5f 92       	push	r5
    318c:	6f 92       	push	r6
    318e:	7f 92       	push	r7
    3190:	8f 92       	push	r8
    3192:	9f 92       	push	r9
    3194:	af 92       	push	r10
    3196:	bf 92       	push	r11
    3198:	cf 92       	push	r12
    319a:	df 92       	push	r13
    319c:	ef 92       	push	r14
    319e:	ff 92       	push	r15
    31a0:	0f 93       	push	r16
    31a2:	1f 93       	push	r17
    31a4:	cf 93       	push	r28
    31a6:	df 93       	push	r29
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	ca 1b       	sub	r28, r26
    31ae:	db 0b       	sbc	r29, r27
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	09 94       	ijmp

000031bc <__epilogue_restores__>:
    31bc:	2a 88       	ldd	r2, Y+18	; 0x12
    31be:	39 88       	ldd	r3, Y+17	; 0x11
    31c0:	48 88       	ldd	r4, Y+16	; 0x10
    31c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    31c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    31c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    31c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    31ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    31cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    31ce:	b9 84       	ldd	r11, Y+9	; 0x09
    31d0:	c8 84       	ldd	r12, Y+8	; 0x08
    31d2:	df 80       	ldd	r13, Y+7	; 0x07
    31d4:	ee 80       	ldd	r14, Y+6	; 0x06
    31d6:	fd 80       	ldd	r15, Y+5	; 0x05
    31d8:	0c 81       	ldd	r16, Y+4	; 0x04
    31da:	1b 81       	ldd	r17, Y+3	; 0x03
    31dc:	aa 81       	ldd	r26, Y+2	; 0x02
    31de:	b9 81       	ldd	r27, Y+1	; 0x01
    31e0:	ce 0f       	add	r28, r30
    31e2:	d1 1d       	adc	r29, r1
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
    31ee:	ed 01       	movw	r28, r26
    31f0:	08 95       	ret

000031f2 <itoa>:
    31f2:	fb 01       	movw	r30, r22
    31f4:	9f 01       	movw	r18, r30
    31f6:	e8 94       	clt
    31f8:	42 30       	cpi	r20, 0x02	; 2
    31fa:	c4 f0       	brlt	.+48     	; 0x322c <itoa+0x3a>
    31fc:	45 32       	cpi	r20, 0x25	; 37
    31fe:	b4 f4       	brge	.+44     	; 0x322c <itoa+0x3a>
    3200:	4a 30       	cpi	r20, 0x0A	; 10
    3202:	29 f4       	brne	.+10     	; 0x320e <itoa+0x1c>
    3204:	97 fb       	bst	r25, 7
    3206:	1e f4       	brtc	.+6      	; 0x320e <itoa+0x1c>
    3208:	90 95       	com	r25
    320a:	81 95       	neg	r24
    320c:	9f 4f       	sbci	r25, 0xFF	; 255
    320e:	64 2f       	mov	r22, r20
    3210:	77 27       	eor	r23, r23
    3212:	0e 94 2a 19 	call	0x3254	; 0x3254 <__udivmodhi4>
    3216:	80 5d       	subi	r24, 0xD0	; 208
    3218:	8a 33       	cpi	r24, 0x3A	; 58
    321a:	0c f0       	brlt	.+2      	; 0x321e <itoa+0x2c>
    321c:	89 5d       	subi	r24, 0xD9	; 217
    321e:	81 93       	st	Z+, r24
    3220:	cb 01       	movw	r24, r22
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	a1 f7       	brne	.-24     	; 0x320e <itoa+0x1c>
    3226:	16 f4       	brtc	.+4      	; 0x322c <itoa+0x3a>
    3228:	5d e2       	ldi	r21, 0x2D	; 45
    322a:	51 93       	st	Z+, r21
    322c:	10 82       	st	Z, r1
    322e:	c9 01       	movw	r24, r18
    3230:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <strrev>

00003234 <strrev>:
    3234:	dc 01       	movw	r26, r24
    3236:	fc 01       	movw	r30, r24
    3238:	67 2f       	mov	r22, r23
    323a:	71 91       	ld	r23, Z+
    323c:	77 23       	and	r23, r23
    323e:	e1 f7       	brne	.-8      	; 0x3238 <strrev+0x4>
    3240:	32 97       	sbiw	r30, 0x02	; 2
    3242:	04 c0       	rjmp	.+8      	; 0x324c <strrev+0x18>
    3244:	7c 91       	ld	r23, X
    3246:	6d 93       	st	X+, r22
    3248:	70 83       	st	Z, r23
    324a:	62 91       	ld	r22, -Z
    324c:	ae 17       	cp	r26, r30
    324e:	bf 07       	cpc	r27, r31
    3250:	c8 f3       	brcs	.-14     	; 0x3244 <strrev+0x10>
    3252:	08 95       	ret

00003254 <__udivmodhi4>:
    3254:	aa 1b       	sub	r26, r26
    3256:	bb 1b       	sub	r27, r27
    3258:	51 e1       	ldi	r21, 0x11	; 17
    325a:	07 c0       	rjmp	.+14     	; 0x326a <__udivmodhi4_ep>

0000325c <__udivmodhi4_loop>:
    325c:	aa 1f       	adc	r26, r26
    325e:	bb 1f       	adc	r27, r27
    3260:	a6 17       	cp	r26, r22
    3262:	b7 07       	cpc	r27, r23
    3264:	10 f0       	brcs	.+4      	; 0x326a <__udivmodhi4_ep>
    3266:	a6 1b       	sub	r26, r22
    3268:	b7 0b       	sbc	r27, r23

0000326a <__udivmodhi4_ep>:
    326a:	88 1f       	adc	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	5a 95       	dec	r21
    3270:	a9 f7       	brne	.-22     	; 0x325c <__udivmodhi4_loop>
    3272:	80 95       	com	r24
    3274:	90 95       	com	r25
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	08 95       	ret

0000327c <_exit>:
    327c:	f8 94       	cli

0000327e <__stop_program>:
    327e:	ff cf       	rjmp	.-2      	; 0x327e <__stop_program>
